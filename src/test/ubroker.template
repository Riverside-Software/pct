 ##########################################################################
 ##                                                                      ##
 ##          Copyright (c) 1998 by Progress Software Corporation         ##
 ##                                                                      ##
 ## All rights reserved.  No part of this program or document may be     ##
 ## reproduced in any form or by any means without permission in writing ##
 ## from Progress Software Corporation.                                  ##
 ##                                                                      ##
 ##########################################################################
 #
 # WebSpeed/AppServer/DataServer properties definition file for UNIX
 #
 # -------------------- ubroker.properties ------------------------------
 #
 # Property File for the Unified Broker and NameServer
 #
 #
 # This definition file includes the properties that you can define in
 # a Unified Broker and NameServer configuration. It defines and configures
 # four Brokers, one serving a WebSpeed Transaction Server, one serving
 # an AppServer, one serving an Oracle DataServer, and one serving an
 # ODBC DataServer, and a NameServer.
 #
 # Comments indicate which properties you cannot modify. Many properties have
 # pre-defined defaults. Environment variables are valid for all properties
 # (both numeric and character) using the standard shell conventions $ENVVAR
 # or ${ENVVAR}.  If $ENVVAR is part of a word, then you should use the 
 # ${ENVVAR} version instead.  Also, the escape character is supported (e.g \$)
 # so that you can include a '$' as a keyword value.
 #
 # You can use the asconfig (for AppServers), the nsconfig (for NameServers),
 # or the wsconfig (for WebSpeed) utilities to display any values in this file
 # which can help ensure that environment variables are being interpreted
 # as expected.  In addition, wsconfig can also output any individual values 
 # for use in scripts that need configuration information.  Run wsconfig with
 # no options to get usage.
 #
 # See the comments at the end of the file for complete documentation of all
 # the keywords.
 #
%% Properties File
%% version 80d19
%% Jul 28, 2005 1:34:44 PM

 #
 # Default properties for SonicMQ Adapter broker
 #
[Adapter]
    appserviceNameList=
    autoStart=0
    brkrLogAppend=1
    brkrLogEntries=0
    brkrLoggingLevel=2
    brkrLogThreshold=0
    brokerLogFile=$WRKDIR/broker.log
    classMain=com.progress.ubroker.broker.ubroker
    controllingNameServer=
    description=
    environment=
    groupName=
    hostName=
    infoVersion=9010
    initialAdptrThreads=20
    jvmArgs=$JVMARGS
    maxAdptrThreads=30
    maxClientInstance=512
    minAdptrThreads=10
    password=
    portNumber=3620
    registerNameServer=1
    registrationMode=Register-IP
    registrationRetry=30
    srvrLogAppend=1
    srvrLogEntries=0
    srvrLogFile=$WRKDIR/server.log
    srvrLoggingLevel=2
    srvrLogThreshold=0
    srvrStartupParam=
    userName=
    uuid=
    workDir=$WRKDIR

[AdminRole]
    apps_defaults=
    apps_enable=
    apps_props=
    apps_stats=
    servlet_props=
    servlet_services=read
    servlet_stats=

[AdminRole.PSCAdmin]
    apps_defaults=read,write
    apps_enable=read,write
    apps_props=read,write
    apps_stats=read,write
    servlet_props=read,write
    servlet_services=read,write,delete
    servlet_stats=read,write

[AdminRole.PSCOper]
    apps_defaults=read
    apps_enable=read
    apps_props=read
    apps_stats=read
    servlet_props=read
    servlet_services=read
    servlet_stats=read

 #
 # Default properties for the AppServer Internet Adapter (AIA)
 #
[AIA]
    adminIPList=
    allowAiaCmds=0
    controllingNameServer=NS1
    Host=localhost
    httpsEnabled=1
    idleConnectionTimeout=3600
    logAppend=0
    logEntries=0
    logFile=$WRKDIR/aia.log
    loggingLevel=2
    logThreshold=0
    maxNSClientPort=0
    minNSClientPort=0
    nsClientPortRetry=4
    nsClientPortRetryInterval=250
    Port=3090
    registerNameServer=1
    securePort=443
    soReadTimeout=240

 #
 # Default Environment setting for all unified broker instances
 #
[Environment]

 #
 # Sample Environment for Broker: asbroker1
 #
[Environment.asbroker1]
    TESTENV=MYENV

 #
 # Environment for MSS Dataserver Broker: mssbroker1
 #
[Environment.mssbroker1]
    ODBC_HOME=/usr/mssnt

 #
 # Sample Environment for NameServer: NS1
 #
[Environment.NS1]
    MYENV=MYVAR

 #
 # Environment for ODBC Dataserver Broker: odbbroker1
 #
[Environment.odbbroker1]
    ODBC_HOME=/usr/odbunx

 #
 # Sample Environment for Broker: wsbroker1
 #
[Environment.wsbroker1]
    TESTENV=MYENV

 #
 #  Default properties for NameServer
 #
[NameServer]
    autoStart=0
    brokerKeepAliveTimeout=30
    classMain=com.progress.nameserver.NameServer
    collectStatsData=0
    environment=
    hostName=localhost
    infoVersion=9010
    jvmArgs=$JVMARGS
    location=local
    logAppend=1
    logEntries=0
    loggingLevel=2
    logThreshold=0
    neighborNameServers=
    portNumber=5162
    srvrLogFile=$WRKDIR/ns.log
    workDir=$WRKDIR

 #
 #  Sample definition of a NameServer
 #
[NameServer.NS1]
    autoStart=1
    environment=NS1
    srvrLogFile=$WRKDIR/NS1.ns.log

 #
 # Placeholder property for defining new instance for any group
 #
[NewNameTemplate]
    NewName=

 #
 #  Linkage to the parent group name for the plugin for the Unified Broker tool
 #
[ParentGroup]
    AppServer=UBroker.AS
    AppServer Internet Adapter=AIA
    Messengers=WebSpeed.Messengers
    MSS DataServer=UBroker.MS
    NameServer=NameServer
    ODBC DataServer=UBroker.OD
    Oracle DataServer=UBroker.OR
    SonicMQ Adapter=Adapter
    Web Services Adapter=WSA
    WebSpeed=UBroker.WS

 #
 # Preference settings for tool and service connect and shutdown controls
 #
 # These default values are for tuning various aspects of the Tools 
 # (both command and GUI) used for starting/stopping and querying
 # Brokers and NameServers.
 #
 # As a rule the various 'RetryInterval' values should not be 
 # modified. However, if you experience problems starting, stopping
 # or querying Brokers or NameServers - you may increase the values
 # of the various 'Retry' properties as follows:
 #
 # toolGetSvcStatusRetry	for querying. 
 # toolShutdownSvcConfirmRetry  for stopping.
 # toolConnectSvcRetry          for initial connection to a Broker/NameServer.
 # toolPingSvcRetry             for querying,stopping.
 # admSrvrRegisteredRetry       for autostarting.
 #
[PreferenceRoot]
    admSrvrRegisteredRetry=6
    admSrvrRegisteredRetryInterval=3000
    toolConnectSvcRetry=10
    toolConnectSvcRetryInterval=3000
    toolGetSvcStatusRetry=10
    toolPingSvcRetry=2
    toolShutdownSvcConfirmRetry=10
    toolShutdownSvcConfirmRetryInterval=1000

 #
 # Current preference setting. 
 #
[PreferenceRoot.Preference]

 #
 # Default properties for all unified broker instances
 #
[UBroker]
    appserviceNameList=
    autoStart=0
    autoTrimTimeout=1800
    brkrLogAppend=1
    brkrLogEntries=0
    brkrLoggingLevel=2
    brkrLogThreshold=0
    brokerLogFile=$WRKDIR/broker.log
    collectStatsData=0
    connectingTimeout=60
    controllingNameServer=
    defaultService=0
    description=
    environment=
    flushStatsData=255
    groupName=
    hostName=
    infoVersion=9010
    initialSrvrInstance=5
    jvmArgs=$JVMARGS
    maxClientInstance=512
    maxSrvrInstance=10
    minSrvrInstance=1
    password=
    priorityWeight=0
    PROPATH=${PROPATH}:${WRKDIR}
    registerNameServer=1
    registrationMode=Register-IP
    registrationRetry=30
    requestTimeout=15
    srvrLogAppend=1
    srvrLogEntries=0
    srvrLogFile=$WRKDIR/server.log
    srvrLoggingLevel=2
    srvrLogThreshold=0
    srvrMaxPort=3502
    srvrMinPort=3202
    srvrStartupTimeout=3
    userName=
    uuid=
    workDir=$WRKDIR

 #
 #  Default properties for broker instances serving AppServers
 #
[UBroker.AS]
    4glSrcCompile=0
    classMain=com.progress.ubroker.broker.ubroker
    debuggerEnabled=0
    defaultService=0
    description=AppServer Broker
    operatingMode=State-reset
    portNumber=3090
    srvrActivateProc=
    srvrConnectProc=
    srvrDeactivateProc=
    srvrDisconnProc=
    srvrExecFile=$DLC/bin/_proapsv
    srvrMaxPort=2202
    srvrMinPort=2002
    srvrShutdownProc=
    srvrStartupParam=
    srvrStartupProc=
    srvrStartupProcParam=

 #
 #  Default properties for broker instances serving MSS DataServers
 #
[UBroker.MS]
    brkrLoggingLevel=3
    classMain=com.progress.ubroker.broker.ubroker
    defaultService=0
    description=MSS DataServer Broker
    initialSrvrInstance=0
    maxSrvrInstance=256
    minSrvrInstance=0
    operatingMode=State-aware
    portNumber=4446
    srvrExecFile="@{Startup\DLC}\bin\_msssrv.exe"
    srvrStartupParam=-svub -S X -N TCP -U X -P X -hs 0 -s 40

 #
 # Sample MSS DataServer Broker definition
 #
[UBroker.MS.mssbroker1]
    appserviceNameList=mssbroker1
    brokerLogFile=@{WorkPath}\mssbroker1.broker.log
    controllingNameServer=NS1
    defaultService=1
    description=A sample MSS DataServer Broker
    environment=mssbroker1
    portNumber=4446
    srvrExecFile="@{Startup\DLC}\bin\_msssrv.exe"
    srvrLogFile=@{WorkPath}\mssbroker1.server.log
    srvrStartupParam=-svub -S X -N TCP -U X -P X -hs 0 -s 40
    uuid=172.18.103.53:32:e031b1e7bc:-7d29

 #
 #  Default properties for broker instances serving ODBC DataServers
 #
[UBroker.OD]
    brkrLoggingLevel=3
    classMain=com.progress.ubroker.broker.ubroker
    defaultService=0
    description=ODBC DataServer Broker
    initialSrvrInstance=0
    maxSrvrInstance=256
    minSrvrInstance=0
    operatingMode=State-aware
    portNumber=4444
    srvrExecFile=$DLC/bin/_odbsrv
    srvrStartupParam=-svub -S X -N TCP -U X -P X -hs 0 -s 40

 #   ORACLE_HOME=/u01/oracle/client
 #   ORACLE_SID=ORCL
 #
 # Sample ODBC DataServer Broker definition
 #
[UBroker.OD.odbbroker1]
    appserviceNameList=odbbroker1
    brokerLogFile=$WRKDIR/odbbroker1.broker.log
    controllingNameServer=NS1
    defaultService=1
    description=A sample ODBC DataServer Broker
    environment=odbbroker1
    portNumber=4444
    srvrExecFile=$DLC/bin/_odbsrv
    srvrLogFile=$WRKDIR/odbbroker1.server.log
    srvrStartupParam=-svub -S X -N TCP -U X -P X -hs 0 -s 40
    uuid=172.18.103.53:1f415c:d6330e5d24:-7f1e

 #
 #  Default properties for broker instances serving Oracle DataServers
 #
[UBroker.OR]
    brkrLoggingLevel=3
    classMain=com.progress.ubroker.broker.ubroker
    defaultService=0
    description=Oracle DataServer Broker
    initialSrvrInstance=0
    maxSrvrInstance=256
    minSrvrInstance=0
    operatingMode=State-aware
    portNumber=4445
    srvrExecFile=$DLC/bin/_ora7srv
    srvrStartupParam=-svub -S X -N TCP -U X -P X -hs 0 -s 40

 #
 # Sample Oracle DataServer Broker definition
 #
[UBroker.OR.orabroker1]
    appserviceNameList=orabroker1
    brokerLogFile=$WRKDIR/orabroker1.broker.log
    controllingNameServer=NS1
    defaultService=1
    description=A sample Oracle DataServer Broker
    environment=orabroker1
    portNumber=4445
    srvrExecFile=$DLC/bin/_orasrv
    srvrLogFile=$WRKDIR/orabroker1.server.log
    srvrStartupParam=-svub -S X -N TCP -U X -P X -hs 0 -s 40
    uuid=172.18.103.53:1f415c:d6330e5d24:-7f4d

 #
 #  Default properties for broker instances serving WebSpeed servers
 #
[UBroker.WS]
    4glSrcCompile=0
    applicationURL=
    classMain=com.progress.ubroker.broker.ubroker
    defaultCookieDomain=
    defaultCookiePath=
    defaultService=0
    description=WebSpeed Broker
    fileUploadDirectory=
    operatingMode=Stateless
    portNumber=3055
    srvrAppMode=Development
    srvrDebug=Enabled
    srvrExecFile=$DLC/bin/jvmStart $DLC/bin/_progres
    srvrStartupParam=-p web/objects/web-disp.p -weblogerror
    wsRoot=/webspeed31D

 ###################################################################
 ## Sample Definitions                                            ##
 ##                                                               ##
 ## The following sections provide sample property settings that  ##
 ## you can use as templates for your own definitions.            ##
 ##                                                               ##
 ###################################################################
 # Sample WebSpeed Broker definition
 #
[UBroker.WS.wsbroker1]
    appserviceNameList=wsbroker1
    brokerLogFile=$WRKDIR/wsbroker1.broker.log
    controllingNameServer=NS1
    description=A sample WebSpeed Transaction Server
    environment=wsbroker1
    groupName=
    portNumber=3055
    srvrLogFile=$WRKDIR/wsbroker1.server.log
    userName=
    uuid=932.99.000.ZZZ:1ee77e:cf3bbe04fd:-8000

 #
 # WebSpeed Properties
 #
[WebSpeed]
    Components=1110100
    infoVersion=9010
    RootPath=0
    ScriptPath=0

 #
 # WebSpeed Messenger Properties
 #
 # Whenever there are changes made to this group, the same changes must be made
 # to the msngr properties files(i.e. msngrs.unx and msngrs.nt).
 #
[WebSpeed.Messengers]
    AllowMsngrCmds=0
    controllingNameServer=NS1
    Host=localhost
    logAppend=1
    logEntries=0
    logFile=$WRKDIR/msgr.log
    loggingLevel=1
    logThreshold=0
    maxNSClientPort=0
    minNSClientPort=0
    nsClientPortRetry=4
    nsClientPortRetryInterval=250
    Port=3055
    registerNameServer=1
    useConnID=0
    workDir=$WRKDIR
    wsmAdmIPList=

 #
 # WebSpeed CGIIP Messenger Properties
 #
[WebSpeed.Messengers.CGIIP]
    msngrExecFile=$DLC/bin/cgiip
    msngrScriptFile=$DLC/bin/wspd_cgi.sh

 #
 # WebSpeed ASP Messenger Properties (NT only, Microsoft ASP)
 #
[WebSpeed.Messengers.WSASP]
    msngrExecFile=

 #
 # WebSpeed ISAPI Messenger Properties (NT only, Microsoft IIS)
 #
[WebSpeed.Messengers.WSISA]
    msngrExecFile=

 #
 # WebSpeed NSAPI Messenger Properties (Netscape)
 #
[WebSpeed.Messengers.WSNSA]
    msngrExecFile=$DLC/bin/wsnsa.dll

[WSA]
    adminAuth=1
    adminEnabled=1
    adminRoles=PSCAdmin,PSCOper
    adminSoapAction=urn:services-progress-com:wsa-admin:01
    appAuth=0
    appProtocol=0
    debugClients=
    enableWsdl=1
    enableWsdlListings=1
    httpErrorPage=httperror.html
    location=local
    logAppend=1
    logEntries=4294967295
    logFile=/var/dlcwork-9.1d/wsa.log
    loggingLevel=2
    logMsgThreshold=-1
    logThreshold=0
    noWsdlPage=
    proxyHost=
    proxyPassword=
    proxyPort=0
    proxyUsername=
    webAppEnabled=0
    webServerAuth=0
    workDir=$WRKDIR
    wsaUrl=
    wsdlAuth=0
    wsdlListingPage=WSDLListing.html

[WSA.wsa1]
    location=local
    logFile=/var/dlcwork-9.1d/wsa1.wsa.log
    loggingLevel=2
##############################################################################
##                                                                          ##
## The following comments document in detail how to use this configuration  ##
## file and how to set the various properties for the NameServer, Unified  ##
## Brokers, WebSpeed Transaction Servers, and AppServers.                   ##
##                                                                          ##
##                                                                          ##
##############################################################################
#
# GENERAL INSTRUCTIONS for configuring the Unified Broker and NameServer for
#     WebSpeed and AppServers
#
# The ubroker.properties file consists of 3 types of sections:
# - sections for providing general definitions of components
# - sections for providing default definitions for Brokers that serve
#      WebSpeed or AppServer components. An actual definition contains 
#      properties drawn from the general and default sections. For 
#      example, the [UBroker] section contains properties that you can 
#      include in either a WebSpeed or AppServer instance definition.
# - sections that provide sample definitions that you can use as a 
#      template for creating your own definitions. These samples show 
#      the properties that you must define at a minimum. All other 
#      properties are handled by the default property definitions.
#      
#
# At a minimum, to configure a WebSpeed Transaction Server, you must 
# set properties in the following sections: [UBroker]
# [NameServer], [NameServer.<name-server-name>], [WebSpeed], 
# [WebSpeed.Messengers], the [WebSpeed.Messenger.<interface-type>] 
# section that matches your Web server type, [UBroker.WS], and a 
# [UBroker.WS.<broker-name>] section. If you want to configure 
# additional Transaction Servers, add the appropriate number of 
# [UBroker.WS.<broker-name>] sections. For example, your file could
# define [UBroker.WS.wsbroker1], [UBroker.WS.wscorp], [UBroker.WS.wssubs]. 
# Even if you set all the properties the same for the three
# instances, you must do so in three distinct sections. Each section must define
# a unique broker name.
# 
# At a minimum, to configure an AppServer, you must set properties in
# the following sections:  [UBroker], [NameServer],  
# [NameServer.<name-server-name>], [UBroker.AS], and a 
# [UBroker.AS.<appserver-name>] section. If you want to configure additional 
# AppServers, add the appropriate number of [UBroker.AS.<appserver-name>] 
# sections. For example, your file could define [UBroker.AS.asbroker1], 
# [UBroker.AS.asaccounts], [UBroker.AS.asorders]. Even 
# if you set all the properties the same for the three instances, 
# you must do so in three distinct sections. Each section must 
# define a unique AppServer name.
#
# Optionally, you can include [Environment.<name>] sections for each 
# instance. Label the section with the name of the Broker instance 
# to which it applies, for example, [Environment.wsbroker1] and 
# [Environment.asbroker1]. Or you can configure all instances to
# use the same environment. Under each envionment section, you
# can add at most 20 pairs of environment names and values.
# If the environment value string references other environment variable,
# then these varaibles must be specified in the format of ${ENVVAR} 
# so it can be expanded. For Example, PATH=${PATH}.
# 
# There is a hierarchy among the [UBroker] sections. The [UBroker]
# section is the parent section. Its property settings are inherited
# by the "child" sections: [UBroker.WS] and [UBroker.AS]. These
# sections are in turn parents of the [UBroker.WS.<broker-name>] and
# [UBroker.AS.<appserver-name>] sections.
# 
# You can define multiple and NameServers. Each must be defined
# within its own [NameServer.<name-server-name>] section, for 
# example [NameServer.NS1] and [NameServer.NS2]. Keep in mind 
# that a Broker can only be controlled by a single NameServer 
# at a time.
# 
# Some of the sections are interrelated and depend on information 
# in other sections. For example, the [UBroker] section must 
# include the name of the controlling NameServer and the names 
# of the application servers it manages. The Broker instances 
# that handle WebSpeed or AppServers pick up properties from the 
# general [UBroker] section as well as the specific [UBroker.WS] 
# and [UBroker.AS] sections.
# 
# Following are details about what properties are included in each 
# section and how to set them. You can use environment variables as
# values when setting the properties in this file.
# 
# Some properties are noted as OPTIONAL. This means that you do 
# not have to provide a value for this option, however you must 
# not delete the option. Do not delete any lines from this file.
# 
# Some properties have default values provided; that is, this 
# file already includes definitions for some of the properties. 
# Other properties have values that you must not change or override.
# 
#   
#################
 # [WebSpeed]  This section provides general information for your WebSpeed
 #             configuration.
 #
 #
 # infoVersion=9010     REQUIRED
 #
 # This option is reserved for internal use. Do not modify or override.
 #
 # RootPath     REQUIRED
 #
 # Specifies the Web server's document root directory.
 # This value is set during install. Change it only if your
 # Web server's document root directory changes. Do not override.
 #
 # Default: <user-supplied-value-at-install>
 #
 #
 # ScriptPath      REQUIRED
 #
 # Defines the Web server's scripts directory for executable programs.
 # This value is set during install. Change it only if your
 # Web server's scripts directory changes. Do not override.
 #
 # Default: <user-supplied-value-at-install>
 #
 #
 #  Components=1110100     REQUIRED
 #
 # Defines the WebSpeed components that are available. 
 # Do not modify or override.
 #
 #
 #######################
 # [WebSpeed.Messengers]  This section provides configuration information about
 #                        the WebSpeed Messenger. Your WebSpeed configuration
 #			  typically uses one messenger type (CGIIP, ISAPI, NSAPI).
 #                        You must use a messenger that is compatible with the
 #                        interface that your Web server uses.
 #                        In addition, your configuration might include an
 #                        Active Server Page (ASP) messenger.			  
 #
 #				
 # controllingNameServer     REQUIRED
 #
 # Specifies the name of the NameServer which controls the messenger. A 
 # messenger can be controlled only by a single NameServer at a time.
 #
 # Default: NS1
 #
 #
 # AllowMsngrCmds     OPTIONAL
 #
 # This option specifies if it is permissible to run the messenger's internal 
 # administrative commands. 
 # Possible values:
 # 1 - Allow the commands to run. 0 - Do not allow the commands to run.
 #
 # NOTE:  This must be changed in the specific messenger properties (i.e.
 #        [WebSpeed.Messengers.CGIIP]) to take effect.  Changes in the 
 #        [WebSpeed.Messengers] will not affect the behavior.
 #
 # Default: 0 (Do not allow commands.)
 #
 # wsmAdmIPList     OPTIONAL
 #
 # This option is a comma separated list of IP addresses allowed to access the
 # messenger's internal administrative commands.  The AllowMsngrCmds must be
 # set to 1 allowing access to the internal commands to use this option.
 #
 # NOTE:  This must be changed in the specific messenger properties (i.e.
 #        [WebSpeed.Messengers.CGIIP]) to take effect.  Changes in the 
 #        [WebSpeed.Messengers] will not affect the behavior.
 #
 # Default: [blank] (allow any IP address to access messenger's internal
 #                   commands)
 #
 # workDir    REQUIRED
 #
 # Specifies the directory where the messenger starts. 
 #
 # Default: $WRKDIR
 #
 # useConnID    REQUIRED
 #
 # Specifies whether the messenger uses connection id support for serving
 # web requests. 
 #
 # Default: 0 (do not use connection id support)
 #
 #
 # minNSClientPort         OPTIONAL
 # maxNSClientPort         OPTIONAL
 #
 # Whenever a messenger instance communicates with a NameServer, the messenger
 # instance is assigned a UDP port.  This port is the port that the NameServer
 # uses to send a reponse message to the messenger instance.  By default this port
 # is dynamically assigned by the operating system within the UDP port range
 # of 1024 to 65535.  When the messenger instance and the NameServer are separated
 # by a firewall, all UDP ports in that range must be opened up going from the
 # network that the NameServer is contained in to the network that the messenger
 # is contained in so that communications between the NameServer and the messenger
 # instance will be allowed. (Note that only the controlling NameServer port needs
 # to opened up in the firewall for UDP traffic going from the network containing the
 # messenger instance to the network containing the NameServer.)
 #
 # The minNSClientPort and the maxNSClientPort properties can be used to limit the range 
 # of ports from which a messenger instance can be assigned a UDP port. Progress will 
 # assign the first port that is not currently being used by some other application.
 #
 # The value for these two properties must be a number between 1024 and 65535
 # inclusive (or 0), and minNSClientPort must be less than or equal to maxNSClientPort.
 #
 # If the minimum and maximum values are both set to zero, then a random port number within
 # the implicit fixed range will be dynamically assigned (this was the implicit behavior in
 # versions of Progress prior to 9.1B).  If both minimum and maximum values are set to the same
 # port number, then this UDP port number will be used when communicating with the NameServer. 
 #
 # Default: 0
 #
 # nsClientPortRetry           OPTIONAL
 #
 # Specifies the number of attempts that the messenger instance should make when attempting
 # to get a valid local UDP port number within the specified range. 
 #
 # Default: 4
 # Maximum: 500
 #
 # nsClientPortRetryInterval   OPTIONAL
 #
 # Specifies the interval, in ms, that the messenger instance will wait between retry attempts
 # to get a valid UDP port within the specified range. 
 #
 # Default: 250
 # Maximum: 10,000
 #
 # registerNameServer    REQUIRED
 #
 # Specifies if the Messenger will controlled by a NameServer or will be
 # directly connected to a WebSpeed Transaction Server.
 #
 # Default: 1
 #
 # Host                  OPTIONAL
 #
 # Required if the Messenger will be directly connected to a WebSpeed
 # Transaction Server, i.e. registerNameServer=0, to specify the host location
 # of the WebSpeed Transaction Server. If the Messenger is controlled by a
 # NameServer, i.e. registerNameServer=1, this property is ignored
 #
 # Default: localhost
 #
 # Port                  OPTIONAL
 #
 # Required if the Messenger will be directly connected to a WebSpeed
 # Transaction Server, i.e. registerNameServer=0, to specify the port
 # of the WebSpeed Transaction Server. If the Messenger is controlled by a
 # NameServer, i.e. registerNameServer=1, this property is ignored
 #
 # Default: 3055
 #
 #
 # logAppend             REQUIRED
 #
 # Specifies when a messenger is executed if a new log file should be 
 # created if the file specified by logFile exists, or if the log
 # entries should be appended to the existing log file.  
 #
 # Possible values: 0 - create new messenger log file
 #                  1 - append to the existing messenger log file
 #
 # Default: 1
 #
 #
 # logEntries            REQUIRED
 #
 # specifies the type of information recorded when performing 
 # diagnostic logging.  This property should be set to 0 unless 
 # directed by PSC technical support.
 #
 # Default: 0
 #
 #
 # logFile               REQUIRED
 #
 # specifies the name of the messenger log file
 #
 # Default: $WRKDIR/msgr.log
 #
 #
 # loggingLevel          REQUIRED
 #
 # Specifies the amount of information to be written to the messenger log.
 # Possible values: 0-4
 #                  0 - No log file written
 #                  1 - Error only
 #                  2 - Terse 
 #                  3 - Verbose 
 #                  4 - diagnostic 
 #
 # Default: 1
 #
 #
 # logThreshold          REQUIRED
 #
 # the logThreshold property is not used at this time.  The value should
 # always be set to 0.
 #
 #
 ######
 # [WebSpeed.Messengers.CGIIP]  Define the properties in this section if you are
 #                              using a messenger that communicates with a
 #				CGIIP Web server.
 #
 # msngrExecFile     REQUIRED
 #
 # Specifies the location of the file needed to run the messenger. 
 # This value is configured by the installation process and should not 
 # need changing.
 # 
 # Default: <install-path>/bin/cgiip
 #
 #
 # msngrScriptFile     REQUIRED
 #
 # Specifies the location of the shell script that runs the CGIIP messenger. 
 # This value is configured by the installation process and should not 
 # need changing.
 #
 # Default: <install-path>/bin/wspd_cgi.sh
 #
 #
 ######
 # [WebSpeed.Messengers.WSISA] NT only. Define the properties in this section if
 #                             you are using a messenger that communicates with
 #                             a Microsoft IIS Web server.
 #
 # msngrExecFile     REQUIRED
 #
 # Specifies the location of the file needed to run the messenger. 
 # This value is configured by the installation process and should not 
 # need changing.
 # 
 # Default: <install-path>/bin/wsisa.dll 
 #
 #
 ######
 # [WebSpeed.Messengers.WSNSA]  Define the properties in this section if
 #                              you are using a messenger that communicates with
 #                              a Netscape Web server.
 #
 # msngrExecFile     REQUIRED
 #
 # Specifies the location of the file needed to run the messenger. 
 # This value is configured by the installation process and should not 
 # need changing.
 # 
 # Default: <install-path>/bin/wsnsa.dll 
 #
 #
 ######
 # [WebSpeed.Messengers.WSASP]  Nt only.  Define the properties in this section if
 #                              you are using Active Server Pages. 
 #
 # msngrExecFile     REQUIRED for ASP only
 #
 # Specifies the location of the file needed to run the messenger. 
 # This value is configured by the installation process and should not 
 # need changing.
 # 
 # Default: <install-path>/bin/wsasp.dll 
 #
 #
 ############## 
 # [ParentGroup]  This section provides linkage to the parent group name for the 
 #	          plugin for the Unified Broker tool. Currently for NT only.
 #
 # All properties in this section are REQUIRED. Do not modify or override.
 #
 # WebSpeed=UBroker.WS           Specifies the name of the WebSpeed Broker.
 # AppServer=UBroker.AS          Specifies the name of the AppServer Broker
 # Name Server=NameServer        Specifies the name of the NameServer.
 # Oracle DataServer=UBroker.OR  Specifies the name of the Oracle DataServer Broker.
 # ODBC DataServer=UBroker.OD    Specifies the name of the ODBC DataServer Broker.
 #
 #
 ##############
 # [Environment]  Use this section provides environment variable settings that the
 #                the Admin Server sets for each Unified Broker or NameServer
 #                that it starts. 
 #
 ##############
 # [UBroker]  This section provides information that applies to a Unified 
 #            Broker, regardless of whether it serves a WebSpeed Transaction
 #            Server of an AppServer. This Broker definition is considered the
 #            parent definition. Subsequent instances for managing WebSpeed or
 #            AppServer inherit the definitions you provide here.
 #
 # infoVersion=9010     REQUIRED
 #
 # This option is reserved for internal use. Do not modify or override.
 #
 #
 # workDir     REQUIRED
 #
 # Specifies the directory where the Broker starts. 
 #
 # Default: $WRKDIR
 #
 #
 # srvrLogFile     REQUIRED
 #
 # Specifies the name of the log file that the servers (specified by
 # the srvrexecfile property) started by this broker use.
 #
 # Default: $WRKDIR/server.log
 #
 #
 # brokerLogFile     REQUIRED
 #
 # Specifies the name of the broker's log file.
 #
 # Default: $WRKDIR/broker.log
 #
 #
 # PROPATH     REQUIRED
 #
 # Specifies the PROPATH that the WebSpeed or AppServer processes 
 # (specified by the srvrexecfile property) use when
 # running applications.
 #
 # Default: $PROPATH
 #
 #
 # initialSrvrInstance    REQUIRED
 #
 # The number of servers that you want the unified broker to start initially.
 # This number cannot exceed the number of servers in your license agreement.
 # Note that for AppServers, this number is unlimited.
 # 
 # Default: 5
 #
 #
 # minSrvrInstance     OPTIONAL
 #
 # The minimum number of servers maintained in the server pool that this
 # broker manages. 
 # 
 # Default: 1
 #
 #
 # maxSrvrInstance     OPTIONAL
 #
 # The maximum number of servers maintained in the server pool that this
 # broker manages. If you do not set this property, the broker will
 # continue to create more servers as long as they are needed up to
 # the number licensed.
 # 
 # Default: 10
 #
 # maxClientInstance     OPTIONAL
 #
 # The maximum number of client connections the broker can support
 # concurrently. The default value for this is set high enough
 # to indicate the client connections is unlimited.  Realistically,
 # however the system-level resources needed to support an unlimited
 # number of clients may be exhausted before this limit is reached.
 # If you see broker log entries that contain Exception Messages
 # for "out of space" -or- "OutOfMemory" you may need to reduce 
 # this value to a more reasonable value. Lowering this value
 # can result in client requests being rejected (Exceeded Max
 # Clients). Configuring and starting multiple brokers to 
 # handle higher client loads will mitigate the problem.
 # 
 # Default: 512
 #
 # priorityWeight     REQUIRED
 #
 # Defines a load-balancing priority for this broker relative to other
 # brokers that have an application service equal to one of the 
 # application service listed by the appserviceNameList property and that
 # are registered with the NameServer specified by the 
 # controllingNameServer property.
 #
 # A higher value gives more priority to this broker relative to other
 # brokers registered with the same application service. This property
 # allows you to balance the load across multiple brokers on different
 # machines which have the ability to handle different request loads.
 # For example, a high-end UNIX server would have a higher weight 
 # value that a single CPU PC. 
 #
 # Setting all brokers to the same value will evenly distribute the load.
 # Setting the value to 0 will exclude this broker from selection unless
 # all brokers for the application service have a value of 0. That is,
 # if all brokers have a priorityWeight value of 0, the load is evenly
 # distributed.
 # Possible values: The range is from 0-100, where 100 is the highest priority
 #
 # Default: 0
 #
 #
 # registrationRetry     REQUIRED
 #
 # Specifies a time interval at which the NameServer expects to receive
 # a message from the broker indicating that it is still alive. Contained
 # within the broker's registration message is the value of 
 # registrationRetry. Once the NameServer receives a registration 
 # message from a broker, it must receive "keep alive" messages
 # periodically based on the registrationRetry value; otherwise, it
 # removes the broker from all the application services for which it
 # has registered.
 #
 # Default: 30
 #
 #
 # userName    OPTIONAL
 #  
 # Defines a valid user name.  It is possible to run a broker
 # under a differ user login.  By default a broker will run 
 # under the user login that started the AdminServer (proadsv).
 # To be able to run as a different user, the user that started
 # the Admin Server must have sufficient privileges. Otherwise,
 # Broker startup will fail.
 #
 #
 # password     OPTIONAL
 #
 # Specifies the encrypted password of the userName property. If
 # userName is set, then password is required.  It's value is an
 # encrypted form of the user account's password.
 # This property is automatically encrypted by the Progress 
 # Explorer. If you manually add broker definitions
 # you can generate an encrypted password using the following command:
 #
 #	[Install-dir]/bin/genpassword -password users_password
 #
 #      where: "users_password" is the clear text password
 #             for the userName account.
 #
 # You can then cut and paste the value into password=
 #   
 # Default: (none)
 #
 #
 # groupName    OPTIONAL 
 #
 # Defines the group name for the specified user defined in the
 # userName property.
 #
 # Default: (none)
 #
 #
 #
 # defaultService     REQUIRED
 #
 # Specifies whether the broker supports the default application
 # service. When the broker registers with a NameServer, it
 # indicates whether it supports the default application
 # service in addition to any listed in the appserviceNameList.
 # If you set this property to 0, you must set the
 # appserviceNameList.
 # 
 # Possible values: 0 -- do not support the default service 
 #                  1 -- support the default service
 #
 # Default: 0
 #
 # 
 # debuggerEnabled        OPTIONAL
 #
 #  This boolean flag determines if the AppServer remote debugging
 #  facility is enabled.  If it is, 4GL client applications have
 #  the ability to step into remote AppServer procedures.
 #
 # Default: 0
 #
 # 
 # appserviceNameList      OPTIONAL
 #
 # Specifies a list of servers that the unified broker supports.
 #
 # Default: (none)
 #
 #
 # autoStart     REQUIRED
 # 
 # Specifies whether the Admin Server automatically starts this broker
 # when the Admin Server is started.
 # Possible values: 0 - no auto start; 1 - auto start
 #
 # Default: 0
 #
 #
 # controllingNameServer      REQUIRED
 #
 # Specifies the name of the controlling NameServer. The broker registers
 # its location and the application services it supports with the 
 # specified NameServer. The NameServer specified must be listed in this
 # property file.
 #
 # Default: (none)
 #
 #
 # srvrMinPort     OPTIONAL
 #
 # Specifies the minimum port number available to the server.
 # Possible values: Values that are registered TCP/IP services
 # are ignored. TCP/IP services are typically registered in the
 # etc/services file on UNIX.
 #
 # Default: If you do not set this property or set it to 0, 
 # it defaults to 1026 on UNIX and 3000 on NT.
 #
 #
 # srvrMaxPort     OPTIONAL
 #
 # Specifies the maximum port number available to the server.
 # Generally, if you set srvrMinPort, set srvrMaxPort so that
 # you specify a well-defined range.
 # Possible values: Values that are registered TCP/IP services
 # are ignored. TCP/IP services are typically registered in the
 # etc/services file on UNIX. 
 #
 # Default: If you do not set this property or set it to 0, 
 # it defaults to 5000 on UNIX and NT.
 #
 #
 # environment    OPTIONAL
 #
 # Specifies the set of environment settings that this broker
 # uses when starting the application servers specified by
 # the srvrExecFile property.
 # Possible value: the name of an [Environment] section in
 # this file. For example, if set to wsbroker1, then there
 # must be an environment section [Environment.wsbroker1]
 # in this file.
 #
 #
 # uuid     REQUIRED
 #
 # Specifies a universally unique identifier for this broker.  
 # This value is used by the NameServer referred to by the 
 # controllingNameServer property to uniquely identify 
 # this broker from all other brokers registered with that 
 # NameServer.
 # This property is automatically set by the Progress 
 # Explorer. If you manually add broker definitions
 # you can generate a uuid using the following command:
 #
 #	$DLC/bin/genuuid
 #
 # You can then cut and paste the value into uuid=
 # Default: (none)
 #
 #  
 # brkrLoggingLevel       REQUIRED
 #
 # Specifies the amount of information to be written to the broker log.
 # Possible values: 1-3
 #                  1 - Error only
 #                  2 - Terse 
 #                  3 - Verbose 
 # 
 # Default:  2
 #
 #  
 # brkrLogAppend    REQUIRED
 #
 # Specifies when a broker is started if a new broker log file should be 
 # created even if the file specified by brokerLogFile exists, or if the log
 # entries should be appended to the log file.  
 # Possible values: 0 - create new broker log file
 #                  1 - append to the existing log file
 # 
 # Default: 0
 #
 #  
 # srvrLoggingLevel
 #
 # Specifies the amount of information to be written to the server log.
 # Possible values: 1-3
 #                  1 - Error only
 #                  2 - Terse 
 #                  3 - Verbose 
 #
 # Default: 2
 #
 #  
 # srvrLogAppend  REQUIRED
 #
 # Specifies when the server is started if a new server log file should be 
 # created even if the file specified by srvrLogFile exists, or if the log
 # entries should be appended to the log file.  
 # Possible values: 0 - create new server log file
 #                  1 - append to the existing log file
 # 
 # Default: 0
 #
 #   
 # srvrStartupTimeout        REQUIRED
 #
 # Specifies the amount of time, in seconds, the broker waits for server to become 
 # available before starting a new server.
 #
 # Default: 3
 #   
 # requestTimeout            REQUIRED 
 #
 # Specifies the amount of time, in seconds, the broker will wait for a server to 
 # become available for processing a request.  After this timeout has expired the client
 # will receive a "no servers available" error message.
 # 
 # Default: 15
 #   
 # jvmArgs                   REQUIRED
 #   
 # for setting Java Virtual Machine startup arguments.
 # 
 # Default: $JVMARGS
 #
 # autoTrimTimeout           REQUIRED  
 #
 # Specifies the frequency, in seconds, that the broker attempts to automatically 
 # trim servers.
 # 
 # Default: 1800
 #
 # registrationMode         REQUIRED
 #
 # Specifies when the broker registers with its controlling NameServer 
 # how it should specify its hostname.  This hostname information is
 # passed onto a client application when it attempts to connect to an
 # Application Service that this broker supports.
 #
 # Possible Values:
 #    Register-IP  
 #       Specify the hostname as the IP address of the machine where
 #       the broker is located. The broker will determine its IP
 #       address and pass that to the NameServer when it registers.
 #       Clients will be connected using the IP address.
 #
 #    Register-LocalHost 
 #       Specify the hostname as the hostname of the machine where the 
 #       the broker is located. The broker will determine its hostname 
 #       and pass that to the NameServer when it registers. Clients
 #       will be connected using the hostname.
 #
 #    Register-HostName
 #       Specify the hostname using the value specified in the
 #       hostName property. The broker will pass the value of the
 #       hostname property to the NameServer as its location when it 
 #       registers.Clients will be connected using the hostname as 
 #       specified.
 #
 # Register-IP is the most efficient mechanism, and can be used in
 # most cases. 
 # 
 # If the broker is running on a multi-homed machine (a 
 # machine with a single hostname and more than one IP address) then
 # Register-LocalHost should be used so that clients can connected to the
 # broker regardless of which IP address they have access to. 
 #  
 # If Register-LocalHost results in the broker being register with a
 # hostname which is not valid for all clients then Register-HostName
 # should be used and the hostName property must be set to the
 # hostname value with which you wish the broker to register.  An
 # example, where Register-LocalHost name might be used is if the
 # client needs a fully qualified host name to connect to the broker
 # because it is in a different DNS domain, but the broker using 
 # Register-LocalHost registers with only a simple hostname 
 # (e.g. carkoon vs. carkoon.progress.com).
 #
 # Default: Register-IP
 # 
 #
 # hostName                  OPTIONAL
 #
 # Specifies the hostname value to be used if the registrationMode
 # property is set to Register-HostName.  In all other cases, this
 # property is ignored.
 # 
 # registerNameServer    REQUIRED
 #
 # Specifies if the broker will register with a NameServer.
 #
 # Default: 1
 #
 #################
 #[UBroker.WS]  This section defines default properties for broker instances serving 
 #              WebSpeed servers. You must provide a unique name for each broker instance
 #              by including it within the section label, for example, 
 #              [UBroker.WS.wsbroker1]
 #
 # operatingMode=Stateless    REQUIRED
 #
 # Do not modify this value for WebSpeed servers. Web applications require
 # that the server operates in a stateless mode. Do not override.
 #
 #
 # classMain=com.progress.ubroker.broker.ubroker    REQUIRED
 #
 # Specifies the Java classes that the Admin Server uses to start the unified
 # broker. Do not modify.
 #
 # Default: com.progress.ubroker.broker.ubroker 
 #
 #
 # srvrExecFile REQUIRED
 #
 # Specifies the PROGRESS executable used for the WebSpeed Agents. 
 # Set at install time. 
 # Change this value only if you change the default installation location
 # or build custom executables using PROBUILD. Change only the 
 # $DLC/bin/_progres portion to reflect the name and location of the
 # Agent executable you are using. Do not modify the $DLC/bin/jvmStart
 # portion.
 #
 # Default: $DLC/bin/jvmStart $DLC/bin/_progres 
 #
 #
 # srvrStartupParam     REQUIRED
 # 
 # Specifies the startup parameters the WebSpeed server uses when starting 
 # WebSpeed Agents.
 # Possible values: Any combination of startup parameters that are valid
 # for WebSpeed.
 #
 # Default: -p web/objects/web-disp.p -weblogerror
 #
 #
 # srvrAppMode     REQUIRED
 #
 # When set to Production, the following items are disabled:
 # * Debugging via the URL (?debug=xxx) is ignored (unless the Debugging
 #   option below explicitly enables it).
 # * Utility commands debug, reset and web-utility are disabled.
 #   The ping option only indicates the Agent is available and does not 
 #   display any information on the Agent's environment.
 # * Web objects specified in the URL with the path "src/web/" cannot be run.
 # 
 # When set to Development, the following items are enabled:
 # * Debugging via the URL (?debug=xxx) is allowed (unless the Debugging
 #   option below explicitly disables it).
 # * Utility commands ping, debug, reset and web-utility work.
 # * No limitations on running Web objects with the path "src/web/".
 # Possible values are: Development and Production. 
 #
 # Default: Development
 #
 #
 # srvrDebug     OPTIONAL
 #
 # If debugging is disabled, specifying ?debug=on in the URL has no effect.
 # The default is to allow debugging. Possible values are blank
 # (enable/disable based on Environment option above), Enabled and
 # Disabled. If this option is explicitly set to either Enabled
 # or Disabled, then changes to the Environment option have no effect on the
 # state of debugging.
 #
 # Default: Enabled
 #
 #
 # portNumber     REQUIRED
 #
 # Specifies the TCP/IP port that the unified broker uses to listen
 # to requests.
 # In general, you should specify a port number
 # greater than 1024.  On some systems specifying a number upwards of 5000 or
 # so is preferable. The port number you specify must be free and available
 # on the machine where you started the Broker.
 #
 # On UNIX, try the following command to determine if a port might be available:
 #
 #     fgrep <port-number> /etc/services
 #
 # where port-number is the number of the port you want to know about.  If
 # the port number does not appear in the output of this command, the port is
 # available.
 #
 # If your UNIX system uses Network Information Services (NIS), you can try
 # the ypcat command. For example:
 #
 #     ypcat services | grep <port-number>
 #
 # As with the fgrep command, if the port number does not appear in the
 # output of this command, the port is available.
 #
 # In addition to checking the services file for reserved ports, you can
 # check the system for active ports.
 #
 # The following UNIX command will display any active ports:
 #
 #     netstat -a | grep <port-number>
 #
 # The Broker doesn't require a named port in the services file or NIS
 # services.  However, you probably should add entries to your services file
 # for the BrokerPort and the range of ports between srvrMinPort and
 # srvrMaxPort.  This allows other users on the system to see that you have
 # reserved these ports.
 #
 # Default: 3055
 #
 #
 # 4glSrcCompile        OPTIONAL
 #
 # Currently NOT used, entered for use in the future.
 # This boolean flag determines if the 4GL source compilation facility for
 # R-code only is enabled or not. If it is, 4GL client applications have
 # the ability to compile the 4GL R-code.
 #
 # Default: 0
 #
 # applicationURL     OPTIONAL
 #
 # A server relative URL (starting with a "/") to the path of the
 # application.  If the web server redirects an incoming URL such that the
 # SCRIPT_NAME and PATH_INFO variables don't refer to the application,
 # setting this will allow an application to create self-referencing URLs
 # when SCRIPT_NAME and/or PATH_INFO aren't correct.  If this option is set,
 # the value of the applicationURL global variable available to applications is set 
 # to this value instead of a combination of SCRIPT_NAME and PATH_INFO.
 #
 # Default: (none)
 #
 #
 # defaultCookiePath     OPTIONAL
 #
 # A server relative URL (starting with a "/") to use for all Cookies if not
 # explicitly specified in the set-cookie() or delete-cookie() functions.
 # The default is the value of the AppURL global variable. 
 #
 # Default: (none)
 #
 #
 # defaultCookieDomain     OPTIONAL
 #
 # Domain to send Cookies.  Default is blank causing the web browser to
 # set Cookies only for the current host.  If Cookies need to be available
 # to multiple hosts in the same domain by default, set that domain name here.
 # for instance: .progress.com.  Unless a value is specified for the domain
 # option for set-cookie() and delete-cookie() functions, this value will be
 # used.
 #
 # Default: (none)
 #
 #
 # defaultService=0
 #
 # For WebSpeed servers, the defaultService is set to 0 which indicates that
 # support for accepting the default application service is off.
 # Because this property is set to 0, you must set the
 # appserviceNameList.
 #
 # fileUploadDirectory    OPTIONAL
 # 
 # Specifies a directory where WebSpeed servers can upload files to.
 # The follow HTML snippet shows how to use this feature:
 # <HTML>
 #   <BODY>
 #    <FORM ENCTYPE="multipart/form-data"
 #      ACTION="http://<yourhost>/<msngr path>/<msngr>/ping" METHOD="POST">
 #       <INPUT type="file" name="filename"> <INPUT type="submit">
 #    </FORM>
 #   </BODY>
 # </HTML>
 # 
 # By default this capability is disabled. To enable it specify an
 # upload directory.  Only text file upload is supported, not binary.
 #
 # Default: (none)
 # 
 # wsRoot                  REQUIRED
 #
 # The location of the WebSpeed Workshop static files such as .html
 # .gif. This location must be visible to the Webserver.
 #
 #################
 # [UBroker.AS] This section defines default properties for broker instances 
 #              serving AppServers. You must provide a unique name for each broker instance
 #              by including it within the section label, for example, 
 #              [UBroker.AS.asbroker1]
 #
 # operatingMode
 #
 # AppServer processes can run in three operating modes.
 # Possible values are: Stateless, State-reset, State-aware.
 #
 # Default: State-reset
 #
 #
 # classMain=com.progress.ubroker.broker.ubroker    REQUIRED
 #
 # Specifies the Java classes that the Admin Server uses to start the unified
 # broker. Do not modify.
 # Default: com.progress.ubroker.broker.ubroker 
 #
 #
 # srvrExecFile REQUIRED
 #
 # Specifies the executable that the broker users to start application
 # services.
 # Set at install time. 
 # Change this value only if you change the default installation location
 # or build a custom AppServer executable with PROBUILD.
 #
 # Default: $DLC/bin/_proapsv
 #
 #
 # srvrMinPort     OPTIONAL
 # srvrMaxPort     OPTIONAL
 #
 # Specifies the minimum and maximum port numbers available to the server.
 # Generally, if you set srvrMinPort, set srvrMaxPort so that
 # you specify a well-defined range.
 #
 # Default: 2002 (MinPort) and 2202 (MaxPort)
 #
 #
 # portNumber     REQUIRED
 #
 # Specifies the TCP/IP port that the unified broker uses to listen
 # to requests.
 # In general, you should specify a port number
 # greater than 1024.  On some systems specifying a number upwards of 5000 or
 # so is preferable. The port number you specify must be free and available
 # on the machine where you started the Broker.
 #
 # On UNIX, try the following command to determine if a port might be available:
 #
 #     fgrep <port-number> /etc/services
 #
 # where port-number is the number of the port you want to know about.  If
 # the port number does not appear in the output of this command, the port is
 # available.
 #
 # If your UNIX system uses Network Information Services (NIS), you can try
 # the ypcat command. For example:
 #
 #     ypcat services | grep <port-number>
 #
 # As with the fgrep command, if the port number does not appear in the
 # output of this command, the port is available.
 #
 # In addition to checking the services file for reserved ports, you can
 # check the system for active ports.
 #
 # The following UNIX command will display any active ports:
 #
 #     netstat -a | grep <port-number>
 #
 # The Broker doesn't require a named port in the services file or NIS
 # services.  However, you probably should add entries to your services file
 # for the BrokerPort and the range of ports between srvrMinPort and
 # srvrMaxPort.  This allows other users on the system to see that you have
 # reserved these ports.
 #
 # Default: 3090
 #
 #
 # 4glSrcCompile        OPTIONAL
 #
 # This boolean flag determines if the 4GL source compilation facility for
 # R-code only is enabled or not. If it is, 4GL client applications have
 # the ability to compile the 4GL R-code.
 #
 # Default: 0
 #
 # srvrStartupProc      OPTIONAL
 #
 # Specifies a startup procedure for the server. The procedure
 # must be a valid PROGRESS procedure that the application
 # service can access using PROPATH. 
 #
 # Default: (none)
 #
 #
 # srvrShutdownProc     OPTIONAL
 #
 # Specifies a shutdown procedure for the server. The procedure
 # must be a valid PROGRESS procedure that the application
 # service can access using PROPATH. 
 #
 # Default: (none)
 #
 #
 # srvrConnectProc      OPTIONAL
 # srvrDisconnProc      OPTIONAL
 # srvrActivateProc     OPTIONAL
 # srvrDeactivateProc   OPTIONAL
 #
 # Specify connect/disconnect and activate/deactivate procedures for 
 # AppServers. The procedures must be valid PROGRESS procedures that the application
 # service can access using PROPATH. 
 #
 # Default: (none)
 #
 # srvrStartupParam     OPTIONAL
 # 
 # Specifies PROGRESS client startup parameters that each application 
 # server process uses when the broker starts it. For example, you
 # might want to specify the Database (-db) parameter to connect to
 # the application database.
 #
 # Default: (none)
 #
 #
 # defaultService=0     REQUIRED
 #
 # For the AppServer, the defaultService is set to 0 which indicates that
 # support for accepting the default application service is off.
 # Because this property is set to 0, you must set the appserviceNameList.
 #
 #
 #################
 # [UBroker.OD] This section defines default properties for broker instances 
 #              serving ODBC DataServers. You must provide a unique name for each
 #              broker instance by including it within the section
 #              label, for example, [UBroker.OD.odbbbroker1]
 #
 #
 # operatingMode=State-aware    REQUIRED
 #
 # Do not modify this value for ODBC DataServers. ODBC DataServers require
 # that the server operates in a State-aware mode. Do not override.
 #
 #
 # classMain=com.progress.ubroker.broker.ubroker    REQUIRED
 #
 # Specifies the Java classes that the Admin Server uses to start the unified
 # broker. Do not modify.
 #
 # Default: com.progress.ubroker.broker.ubroker 
 #
 #
 # srvrExecFile                  REQUIRED
 #
 # Specifies the PROGRESS ODBC Data Server executable used for Data Server clients.
 # Set at install time. 
 # Change this value only if you change the default installation location
 # or build custom executables using PROBUILD. Change the name and path 
 # to reflect the name and location of the ODBC Data Server executable you 
 # are using. 
 #  
 # Default: "$DLC/bin/_odbsrv" 
 #
 #
 # initialSrvrInstance           REQUIRED
 #
 # Do not change or override this value.  For ODBC DataServers this
 # value must be 0.
 # 
 # Default: 0
 #
 #
 # minSrvrInstance     OPTIONAL
 #
 # Do not change or override this value.  For ODBC DataServers this
 # value must be 0.
 # 
 # Default: 0
 #
 #
 # maxSrvrInstance     OPTIONAL
 #
 # The maximum number of concurrents DataServer processes that can
 # execute at one time. Modify this value only if you need to support
 # more than the specified number of servers concurrently.
 # 
 # Default: 256
 #
 #
 # brkrLoggingLevel   REQUIRED
 #
 # Specifies the amount of information to be written to the broker log.
 # Possible values: 1-3
 #                  1 - Error only
 #                  2 - Terse 
 #                  3 - Verbose 
 # Default:  3
 #
 #
 # srvrStartupParam     REQUIRED
 # 
 # Must be defined at the instance level for ODBC DataServers and must 
 # contain the default parameters that are supplied in the ODBC
 # samples that are contained in this file.  
 #
 # This is the default parameter list supplied to the broker and passed
 # to the DataServer.  This list MUST include the -svub switch and     
 # generally should be left untouched unless one of these Progress  
 # startup parameters to the server require adjustment for your environment.
 # 
 # See the [UBroker.OD.odbbroker1] section of this file for an example 
 # of how to set this property.
 #
 # Default: (none)
 #
 #
 # portNumber     REQUIRED
 #
 # Specifies the TCP/IP port that the unified broker uses to listen
 # to requests.
 # In general, you should specify a port number
 # greater than 1024.  On some systems specifying a number upwards of 5000 or
 # so is preferable. The port number you specify must be free and available
 # on the machine where you started the Broker.
 #
 # On UNIX, try the following command to determine if a port might be available:
 #
 #     fgrep <port-number> /etc/services
 #
 # where port-number is the number of the port you want to know about.  If
 # the port number does not appear in the output of this command, the port is
 # available.
 #
 # If your UNIX system uses Network Information Services (NIS), you can try
 # the ypcat command. For example:
 #
 #     ypcat services | grep <port-number>
 #
 # As with the fgrep command, if the port number does not appear in the
 # output of this command, the port is available.
 #
 # In addition to checking the services file for reserved ports, you can
 # check the system for active ports.
 #
 # The following UNIX command will display any active ports:
 #
 #     netstat -a | grep <port-number>
 #
 # The Broker doesn't require a named port in the services file or NIS
 # services.  However, you probably should add entries to your services file
 # for the BrokerPort and the range of ports between srvrMinPort and
 # srvrMaxPort.  This allows other users on the system to see that you have
 # reserved these ports.
 #
 # Default: 4444
 #
 #
 # defaultService=0     REQUIRED
 #
 # For DataServers, the defaultService is set to 0 which indicates that
 # support for accepting the default data service is off.
 # Because this property is set to 0, you must set the
 # appserviceNameList.
 #
 #################
 # [UBroker.MS] This section defines default properties for broker instances 
 #              serving MSS DataServers. You must provide a unique name for each
 #              broker instance by including it within the section
 #              label, for example, [UBroker.MS.mssbroker1]
 #
 #
 # operatingMode=State-aware    REQUIRED
 #
 # Do not modify this value for MSS DataServers. MSS DataServers require
 # that the server operates in a State-aware mode. Do not override.
 #
 #
 # classMain=com.progress.ubroker.broker.ubroker    REQUIRED
 #
 # Specifies the Java classes that the Admin Server uses to start the unified
 # broker. Do not modify.
 #
 # Default: com.progress.ubroker.broker.ubroker 
 #
 #
 # srvrExecFile REQUIRED
 #
 # Specifies the PROGRESS MSS Data Server executable used for Data Server clients.
 # Set at install time. 
 # Change this value only if you change the default installation location
 # or build custom executables using PROBUILD. Change the name and path 
 # to reflect the name and location of the MSS Data Server executable you 
 # are using. 
 #
 # Default: "@{Startup\DLC}\bin\_msssrv.exe" 
 #
 #
 # initialSrvrInstance    REQUIRED
 #
 # Do not change or override this value.  For MSS DataServers this
 # value must be 0.
 # 
 # Default: 0
 #
 #
 # minSrvrInstance     OPTIONAL
 #
 # Do not change or override this value.  For MSS DataServers this
 # value must be 0.
 # 
 # Default: 0
 #
 #
 # maxSrvrInstance     OPTIONAL
 #
 # The maximum number of concurrents DataServer processes that can
 # execute at one time. Modify this value only if you need to support
 # more than the specified number of servers concurrently.
 # 
 # Default: 256
 #
 #
 # brkrLoggingLevel   REQUIRED
 #
 # Specifies the amount of information to be written to the broker log.
 # Possible values: 1-3
 #                  1 - Error only
 #                  2 - Terse 
 #                  3 - Verbose 
 # 
 # Default:  3
 #
 #
 # srvrStartupParam     REQUIRED
 # 
 # Must be defined at the instance level for MSS DataServers and must 
 # contain the default parameters that are supplied in the MSS
 # samples that are contained in this file.  
 #
 # This is the default parameter list supplied to the broker and passed
 # to the DataServer.  This list MUST include the -svub switch and     
 # generally should be left untouched unless one of these Progress  
 # startup parameters to the server require adjustment for your environment.
 # 
 # See the [UBroker.MS.mssbroker1] section of this file for an example 
 # of how to set this property.
 #
 # Default: (none)
 #
 #
 # portNumber     REQUIRED
 #
 # Specifies the TCP/IP port that the unified broker uses to listen
 # to requests.
 # In general, you should specify a port number
 # greater than 1024.  On some systems specifying a number upwards of 5000 or
 # so is preferable. The port number you specify must be free and available
 # on the machine where you started the Broker.
 #
 # On UNIX, try the following command to determine if a port might be available:
 #
 #     fgrep <port-number> /etc/services
 #
 # where port-number is the number of the port you want to know about.  If
 # the port number does not appear in the output of this command, the port is
 # available.
 #
 # If your UNIX system uses Network Information Services (NIS), you can try
 # the ypcat command. For example:
 #
 #     ypcat services | grep <port-number>
 #
 # As with the fgrep command, if the port number does not appear in the
 # output of this command, the port is available.
 #
 # In addition to checking the services file for reserved ports, you can
 # check the system for active ports.
 #
 # The following UNIX command will display any active ports:
 #
 #     netstat -a | grep <port-number>
 #
 # The Broker doesn't require a named port in the services file or NIS
 # services.  However, you probably should add entries to your services file
 # for the BrokerPort and the range of ports between srvrMinPort and
 # srvrMaxPort.  This allows other users on the system to see that you have
 # reserved these ports.
 #
 # Default: 4446
 #
 #
 # defaultService=0     REQUIRED
 #
 # For DataServers, the defaultService is set to 0 which indicates that
 # support for accepting the default data service is off.
 # Because this property is set to 0, you must set the
 # appserviceNameList.
 #
 # #################
 # [UBroker.OR] This section defines default properties for broker instances 
 #              serving Oracle DataServers. You must provide a unique name for each
 #              broker instance by including it within the section
 #              label, for example, [UBroker.OR.orabbroker1]
 #
 #
 # operatingMode=State-aware    REQUIRED
 #
 # Do not modify this value for Oracle DataServers. Oracle DataServers require
 # that the server operates in a State-aware mode. Do not override.
 #
 #
 # classMain=com.progress.ubroker.broker.ubroker    REQUIRED
 #
 # Specifies the Java classes that the Admin Server uses to start the unified
 # broker. Do not modify.
 #
 #
 # srvrExecFile                 REQUIRED
 #
 # Specifies the PROGRESS Oracle Data Server executable used for Data Server clients.
 # Set at install time. 
 # If you are connecting to an Oracle 7 database, you should retain the default 
 # Data Server Executable name.  If you are connecting to an Oracle 8 database,
 # you should modify the Data Server Executable name portion to "_ora8srv".
 # Otherwise, change this value only if you change the default installation location
 # or build custom executables using PROBUILD. Change the name and path to reflect
 # name and location of the Oracle Data Server executable you are using. 
 #
 # Default: "$DLC/bin/_ora7srv" 
 #
 #
 # Default: com.progress.ubroker.broker.ubroker 
 #
 #
 # initialSrvrInstance          REQUIRED
 #
 # Do not change or override this value.  For Oracle DataServers this
 # value must be 0.
 # 
 # Default: 0
 #
 #
 # minSrvrInstance     OPTIONAL
 #
 # Do not change or override this value.  For Oracle DataServers this
 # value must be 0.
 # 
 # Default: 0
 #
 #
 # maxSrvrInstance     OPTIONAL
 #
 # The maximum number of concurrents DataServer processes that can
 # execute at one time. Modify this value only if you need to support
 # more than the specified number of servers concurrently.
 # 
 # Default: 256
 #
 #
 # brkrLoggingLevel   REQUIRED
 #
 # Specifies the amount of information to be written to the broker log.
 # Possible values: 1-3
 #                  1 - Error only
 #                  2 - Terse 
 #                  3 - Verbose 
 # 
 # Default:  3
 #
 #
 # srvrStartupParam     REQUIRED
 # 
 # Must be defined at the instance level for Oracle DataServers and
 # must contain the default parameters that are supplied in 
 # the Oracle samples that are contained in this file.  
 #
 # This is the default parameter list supplied to the broker and passed
 # to the DataServer.  This list MUST include the -svub switch and     
 # generally should be left untouched unless one of these Progress  
 # startup parameters to the server require adjustment for your environment.
 #
 # See the [UBroker.OR.orabroker1] section of this file for an example 
 # of how to set this property.
 #
 # Default: (none)
 #
 #
 # portNumber     REQUIRED
 #
 # Specifies the TCP/IP port that the unified broker uses to listen
 # to requests.
 # In general, you should specify a port number
 # greater than 1024.  On some systems specifying a number upwards of 5000 or
 # so is preferable. The port number you specify must be free and available
 # on the machine where you started the Broker.
 #
 # On UNIX, try the following command to determine if a port might be available:
 #
 #     fgrep <port-number> /etc/services
 #
 # where port-number is the number of the port you want to know about.  If
 # the port number does not appear in the output of this command, the port is
 # available.
 #
 # If your UNIX system uses Network Information Services (NIS), you can try
 # the ypcat command. For example:
 #
 #     ypcat services | grep <port-number>
 #
 # As with the fgrep command, if the port number does not appear in the
 # output of this command, the port is available.
 #
 # In addition to checking the services file for reserved ports, you can
 # check the system for active ports.
 #
 # The following UNIX command will display any active ports:
 #
 #     netstat -a | grep <port-number>
 #
 # The Broker doesn't require a named port in the services file or NIS
 # services.  However, you probably should add entries to your services file
 # for the BrokerPort and the range of ports between srvrMinPort and
 # srvrMaxPort.  This allows other users on the system to see that you have
 # reserved these ports.
 #
 # Default: 4445
 #
 #
 # defaultService=0     REQUIRED
 #
 # For AppServers, the defaultService is set to 0 which indicates that
 # support for accepting the default data service is off.
 # Because this property is set to 0, you must set the
 # appserviceNameList.
 #
 #
 #
 ############# 
 # [NameServer]  This section defines default properties for the NameServer.
 #               You must provide a unique name for a NameServer
 #               by including it within the section label, for example, 
 #               [NameServer.NS1]
 #
 # infoVersion=9010   REQUIRED
 #
 # This option is reserved for internal use. Do not modify or override.
 #
 #
 # workDir      REQUIRED
 #
 # Specifies the directory where the Broker starts.
 # Define a directory path that is both readable and writable by all users
 # on the system.  
 #
 # Default: $WRKDIR
 #
 #
 # classMain=com.progress.nameserver.NameServer      REQUIRED
 #
 # Specifies the Java classes that the Admin Server uses to start the 
 # NameServer. Do not modify or override.
 #
 # Default: com.progress.nameserver.NameServer
 #
 #
 # hostName     OPTIONAL
 #
 # Specifies the name or IP address of the machine on which the Name 
 # Server resides. This property is relevant only if the location
 # property is set to remote.
 #
 # Default:localhost
 #
 #
 # portNumber     REQUIRED
 #
 # If the location property is set to local, specifies the UDD 
 # port at which the NameServer listens to receive requests.
 # If the location property is set to remote, specifies the UDD
 # port that any broker which has specified this NameServer as
 # its controllingNameServer uses to send registration requests.
 #
 # Default: 5162
 #
 #
 # brokerKeepAliveTimeout     REQUIRED
 #
 # Specifies the frequency (in seconds) that the NameServer
 # checks its list of registered brokers to see which ones
 # have times out. For best performance, this value should be 
 # larger than the brokers' registrationRetry value.
 #
 # Default: 30
 #
 #
 # location
 #
 # Specifies whether the NameServer is local or remote. A local
 # NameServer runs on the local machine; a remote NameServer
 # runs on a remote machines. The purpose of having a remote
 # NameServer definition is to provide a single place within
 # the properties file where multiple brokers can refer to a
 # single NameServer running on some other machine. If you set
 # location to remote, the only properties whose values are
 # relevant are hostName and portNumber.
 # Possible values: local, remote
 #
 # Default: local
 #
 #
 # srvrLogFile     REQUIRED
 #
 # Specifies the name of the NameServer log file.
 #
 # Default: $WRKDIR/ns.log
 #
 #
 # loggingLevel     REQUIRED
 #
 # Specifies the amount of information to be written to the server log.
 # Possible values: 1-3
 #                  1 - Error only
 #                  2 - Terse 
 #                  3 - Verbose 
 #
 # Default:  2 
 #
 #
 # logAppend   REQUIRED
 #
 # Specifies when a NameServer is started if a new NameServer log file should be 
 # created even if the file specified by srvrLogFile exists, or if the log
 # entries should be appended to the log file.  
 # 
 # If set to 0 a new logfile is created each time the NameServer is
 # started up. If set to 1 a new log file is created only if the
 # log file does not exist. If the log file exists then the log
 # entries are appended to the existing file.
 #
 # Default: 1
 #
 #
 # neighborNameServers     OPTIONAL
 #
 # Specifies a list of NameServers that this NameServer will forward 
 # a request to when it receives a request for an Application Service
 # that this NameServer does not know about.  
 #
 # This property is optional. If no value is specified, and the
 # Application Service requested, is not one of the Application
 # Services known to this NameServer, then the NameServer will send
 # a message to the client indicating that the Application Service is
 # not known. 
 #
 # If a value is specified, then the value must contain a comma
 # separated list of local or remote NameServers that are specified
 # in this properties file.
 # 
 #
 # autoStart                OPTIONAL
 #
 # Specifies whether the Admin Server automatically starts the
 # NameServer when the Admin Server is started.
 # Possible values: 0 - no auto start; 1 - auto start
 #
 # Default: 0
 #
 #################
 # [Adapter]  This section provides information that applies to SonicMQ adapter
 #                       broker and server. Subsequent instances for managing 
 #                       adapters inherit the definitions you provide here.
 #
 # infoVersion=9010     REQUIRED
 #
 # This option is reserved for internal use. Do not modify or override.
 #
 # workDir              REQUIRED
 #
 # Specifies the directory where the Broker starts. 
 #
 # Default: $WRKDIR
 #
 #
 # srvrLogFile          REQUIRED
 #
 # Specifies the name of the log file that the server started by this broker use.
 #
 # Default: $WRKDIR/server.log
 #
 # brokerLogFile        REQUIRED
 #
 # Specifies the name of the broker's log file.
 #
 # Default: $WRKDIR/broker.log
 #
 # maxClientInstance     OPTIONAL
 #
 # The maximum number of client connections the broker can support
 # concurrently. The default value for this is set high enough
 # to indicate the client connections is unlimited.  Realistically,
 # however the system-level resources needed to support an unlimited
 # number of clients may be exhausted before this limit is reached.
 # If you see broker log entries that contain Exception Messages
 # for "out of space" -or- "OutOfMemory" you may need to reduce 
 # this value to a more reasonable value. Lowering this value
 # can result in client requests being rejected (Exceeded Max
 # Clients). Configuring and starting multiple brokers to 
 # handle higher client loads will mitigate the problem.
 # 
 # Default: 512
 #
 # registrationRetry     REQUIRED
 #
 # Specifies a time interval at which the NameServer expects to receive
 # a message from the broker indicating that it is still alive. Contained
 # within the broker's registration message is the value of 
 # registrationRetry. Once the NameServer receives a registration 
 # message from a broker, it must receive "keep alive" messages
 # periodically based on the registrationRetry value; otherwise, it
 # removes the broker from all the application services for which it
 # has registered.
 #
 # Default: 30
 #
 #
 # userName               OPTIONAL
 #
 # Defines a valid user account.  It is possible to run a broker
 # under a differ user account.  By default a broker will run 
 # under the System Account (also known as LocalSystem). 
 # 
 # To be able to use as a different user account, the user must
 # have administrator privileses AND 'Logon as batch' enabled.
 # See the User Manager->User Rights options. The value of userName
 # has 3 formats:
 #    1.  user_name    =  defines an Administrator on the local machine.
 #    2.  ./user_name  =  same as option 1, with explicit reference to the
 #                        local machine.
 #    3. domain/user   =  A user on a specified domain.
 #
 #    
 #
 # password     OPTIONAL
 #
 # Specifies the encrypted password of the userName property. If
 # userName is set, then password is required.  It's value is an
 # encrypted form of the user account's password.
 # This property is automatically encrypted by the Progress 
 # Explorer. If you manually add broker definitions
 # you can generate an encrypted password using the following command:
 #
 #	[Install-dir]/bin/genpassword -password users_password
 #
 #      where: "users_password" is the clear text password
 #             for the userName account.
 #
 # You can then cut and paste the value into password=
 #   
 # Default: (none)
 #
 #
 # groupName    OPTIONAL 
 #
 # Defines the group name for the specified user defined in the
 # userName property.
 #
 # Default: (none)
 #
 #
 #
 # appserviceNameList      OPTIONAL
 #
 # Specifies a list of servers that the broker supports.
 #
 # Default: (none)
 #
 # portNumber              REQUIRED
 #
 # Specifies the TCP/IP port that the unified broker uses to listen
 # to requests.
 # In general, you should specify a port number
 # greater than 1024.  On some systems specifying a number upwards of 5000 or
 # so is preferable. The port number you specify must be free and available
 # on the machine where you started the Broker.
 #
 # On UNIX, try the following command to determine if a port might be available:
 #
 #     fgrep <port-number> /etc/services
 #
 # where port-number is the number of the port you want to know about.  If
 # the port number does not appear in the output of this command, the port is
 # available.
 #
 # If your UNIX system uses Network Information Services (NIS), you can try
 # the ypcat command. For example:
 #
 #     ypcat services | grep <port-number>
 #
 # As with the fgrep command, if the port number does not appear in the
 # output of this command, the port is available.
 #
 # In addition to checking the services file for reserved ports, you can
 # check the system for active ports.
 #
 # The following UNIX command will display any active ports:
 #
 #     netstat -a | grep <port-number>
 #
 # The Broker doesn't require a named port in the services file or NIS
 # services.  However, you probably should add entries to your services file
 # for the BrokerPort.  This allows other users on the system to see that you have
 # reserved these ports.
 #
 # Default: 3620
 #
 # controllingNameServer      REQUIRED
 #
 # Specifies the name of the controlling NameServer. The broker registers
 # its location and the application services it supports with the 
 # specified NameServer. The NameServer specified must be listed in this
 # property file.
 #
 # Default: (none)
 #
 # environment                OPTIONAL
 #
 # Specifies the set of environment settings that this broker
 # uses when starting the application servers specified by
 # the srvrExecFile property.
 # Possible value: the name of an [Environment] section in
 # this file. For example, if set to SMQGateway1, then there
 # must be an environment section [Environment.SMQGateway1]
 # in this file.
 #
 #
 # uuid                        REQUIRED
 #
 # Specifies a universally unique identifier for this broker.  
 # This value is used by the NameServer referred to by the 
 # controllingNameServer property to uniquely identify 
 # this broker from all other brokers registered with that 
 # NameServer.
 # This property is automatically set by the Progress 
 # Explorer. If you manually add broker definitions
 # you can generate a uuid using the following command:
 #
 #	$DLC/bin/genuuid
 #
 # You can then cut and paste the value into uuid=
 # Default: (none)
 #
 #
 # brkrLoggingLevel       REQUIRED
 #
 # Specifies the amount of information to be written to the broker log.
 # Possible values: 1-3
 #                  1 - Error only
 #                  2 - Terse 
 #                  3 - Verbose 
 # 
 # Default:  2
 #
 #  
 # brkrLogAppend    REQUIRED
 #
 # Specifies when a broker is started if a new broker log file should be 
 # created even if the file specified by brokerLogFile exists, or if the log
 # entries should be appended to the log file.  
 # Possible values: 0 - create new broker log file
 #                  1 - append to the existing log file
 # 
 # Default: 0
 #
 #  
 # srvrLoggingLevel
 #
 # Specifies the amount of information to be written to the server log.
 # Possible values: 1-3
 #                  1 - Error only
 #                  2 - Terse 
 #                  3 - Verbose 
 #
 # Default: 2
 #
 #  
 # srvrLogAppend  REQUIRED
 #
 # Specifies when the server is started if a new server log file should be 
 # created even if the file specified by srvrLogFile exists, or if the log
 # entries should be appended to the log file.  
 # Possible values: 0 - create new server log file
 #                  1 - append to the existing log file
 # 
 # Default: 0   
 #   
 # jvmArgs                   REQUIRED
 #   
 # for setting Java Virtual Machine startup arguments.
 # 
 # Default: $JVMARGS
 # 
 # registrationMode         REQUIRED
 #
 # Specifies when the broker registers with its controlling NameServer 
 # how it should specify its hostname.  This hostname information is
 # passed onto a client application when it attempts to connect to an
 # Application Service that this broker supports.
 #
 # Possible Values:
 #    Register-IP  
 #       Specify the hostname as the IP address of the machine where
 #       the broker is located. The broker will determine its IP
 #       address and pass that to the NameServer when it registers.
 #       Clients will be connected using the IP address.
 #
 #    Register-LocalHost 
 #       Specify the hostname as the hostname of the machine where the 
 #       the broker is located. The broker will determine its hostname 
 #       and pass that to the NameServer when it registers. Clients
 #       will be connected using the hostname.
 #
 #    Register-HostName
 #       Specify the hostname using the value specified in the
 #       hostName property. The broker will pass the value of the
 #       hostname property to the NameServer as its location when it 
 #       registers.Clients will be connected using the hostname as 
 #       specified.
 #
 # Register-IP is the most efficient mechanism, and can be used in
 # most cases. 
 # 
 # If the broker is running on a multi-homed machine (a 
 # machine with a single hostname and more than one IP address) then
 # Register-LocalHost should be used so that clients can connected to the
 # broker regardless of which IP address they have access to. 
 #  
 # If Register-LocalHost results in the broker being register with a
 # hostname which is not valid for all clients then Register-HostName
 # should be used and the hostName property must be set to the
 # hostname value with which you wish the broker to register.  An
 # example, where Register-LocalHost name might be used is if the
 # client needs a fully qualified host name to connect to the broker
 # because it is in a different DNS domain, but the broker using 
 # Register-LocalHost registers with only a simple hostname 
 # (e.g. carkoon vs. carkoon.progress.com).
 #
 # Default: Register-IP
 #
 # Note: a register mode of Register-LocalHost or Register-HostName
 # should not be used if the unified broker is registering with a
 # NameServer earlier than version 9.1.
 #
 #
 # hostName                  OPTIONAL
 #
 # Specifies the hostname value to be used if the registrationMode
 # property is set to Register-HostName.  In all other cases, this
 # property is ignored.
 # 
 # 
 # classMain                 REQUIRED
 #
 # Specifies the Java classes that the Admin Server uses to start the broker. 
 # Do not modify. 
 #
 # Default: com.progress.ubroker.broker.ubroker 
 #
 #
 # srvrStartupParam          OPTIONAL
 #
 # Miscellaneous startup parameters for the adapter - TBD.
 #
 # registerNameServer    REQUIRED
 #
 # Specifies if the broker will register with a NameServer.
 #
 # Default: 1
 #
 #
 #################
 # [AIA]  This section provides information that applies to the AppServer Internet Adapter
 # or AIA.  Subsequent instances for managing AIAs inherit the definitions you provide 
 # here.
 #
 # logFile                   REQUIRED
 #
 # Specifies the name of the log file that the Appserver internet adapter uses.
 #
 # Default: $WRKDIR/aia.log
 #
 #
 # controllingNameServer      REQUIRED
 #
 # Specifies the name of the controlling NameServer. The broker registers
 # its location and the application services it supports with the 
 # specified NameServer. The NameServer specified must be listed in this
 # property file.
 #
 # Default: (none)
 #
 # loggingLevel               REQUIRED
 #
 # Specifies the amount of information to be written to the broker log.
 # Possible values: 1-3
 #                  1 - Error only
 #                  2 - Terse 
 #                  3 - Verbose 
 # 
 # Default:  2
 #
 #  
 # logAppend          REQUIRED
 #
 # Specifies when a broker is started if a new broker log file should be 
 # created even if the file specified by brokerLogFile exists, or if the log
 # entries should be appended to the log file.  
 # Possible values: 0 - create new broker log file
 #                  1 - append to the existing log file
 # 
 # Default: 0
 #
 # 
 # httpsEnabled        REQUIRED
 #
 # Indicates whether the connections from AppServer clients should be
 # restricted to those that connect using HTTPS tunneling.  If this property
 # is set to 1, but the license indicates that AIA without encryption was
 # installed, this property is ignored.
 #
 # Possible values: 0 - HTTPS tunneling off (no encryption)
 #                  1 - HTTPS tunneling on (AIA with encryption installed)
 #
 # Default: 1
 #
 #
 # idleConnectionTimeout  REQUIRED
 # 
 # Timeout vale in seconds between an AppServer client and an AIA instance.
 # If a connection is idle for more than the specified timeout value, then the
 # AIA instnace will terminate the connection by automaitcally disconnecting 
 # the connection from the AppServer.
 #                
 # Default: 3600
 #
 #
 # minNSClientPort         OPTIONAL
 # maxNSClientPort         OPTIONAL
 #
 # Whenever an AIA instance communicates with a NameServer, the AIA
 # instance is assigned a UDP port.  This port is the port that the NameServer
 # uses to send a reponse message to the AIA instance.  By default this port
 # is dynamically assigned by the operating system within the UDP port range
 # of 1024 to 65535.  When the AIA instance and the NameServer are separated
 # by a firewall, all UDP ports in that range must be opened up going from the
 # network that the NameServer is contained in to the network that the AIA
 # is contained in so that communications between the NameServer and the AIA
 # instance will be allowed. (Note that only the controlling NameServer port needs
 # to opened up in the firewall for UDP traffic going from the network containing the
 # AIA instance to the network containing the NameServer.)
 #
 # The minNSClientPort and the maxNSClientPort properties can be used to limit the range 
 # of ports from which an AIA instance can be assigned a UDP port. Progress will 
 # assign the first port that is not currently being used by some other application.
 #
 # The value for these two properties must be a number between 1024 and 65535
 # inclusive (or 0), and minNSClientPort must be less than or equal to maxNSClientPort.
 #
 # If the minimum and maximum values are both set to zero, then a random port number within
 # the implicit fixed range will be dynamically assigned (this was the implicit behavior in
 # versions of Progress prior to 9.1B).  If both minimum and maximum values are set to the same
 # port number, then this UDP port number will be used when communicating with the NameServer. 
 #
 # Default: 0
 #
 #
 # nsClientPortRetry           OPTIONAL
 #
 # Specifies the number of attempts that the AIA instance should make when attempting
 # to get a valid local UDP port number within the specified range. 
 #
 # Default: 4
 # Maximum: 500
 #
 # nsClientPortRetryInterval   OPTIONAL
 #
 # Specifies the interval, in ms, that the AIA instance will wait between retry attempts
 # to get a valid UDP port within the specified range. 
 #
 # Default: 250
 # Maximum: 10,000
 #
 # 
 # securePort                  OPTIONAL
 # 
 # This property is only relevent if httpsEnabled is true.  The value of this 
 # property must be set to the port the WebServer is listening for requests, 
 # that specify the HTTPS protocol.  If not set and httpsEnabled is set to true,
 # then this property defaults to 443.
 #
 # soReadTimeout               OPTIONAL
 # 
 # This property specifies the amount of time, in seconds, the Aia adapter will wait
 # for a response from an appserver before sending a "keepalive" message to
 # the client.  The value of 0 specifies that the "keepalive" message is not used.
 # If the property is not specified, the default value will be assumed.
 #
 # Default: 240
 #
 #
 # allowAiaCmds                OPTIONAL
 # 
 # This option specifies if it is permissible to run the Aia adapter's internal 
 # administrative commands. 
 # Possible values:
 # 1 - Allow the commands to run. 0 - Do not allow the commands to run.
 #
 # Default: 0 (Do not allow commands.)
 #
 #
 # adminIPList                 OPTIONAL
 # 
 # This option is a comma separated list of IP addresses allowed to access the
 # Aia adapter's internal administrative commands.  The property, allowAiaCmds, 
 # must be set to 1 allowing access to the internal commands to use this option.
 #
 #
 # Default: [blank] (allow any IP address to access Aia adapter's internal
 #                   commands)
 # Default: empty string
 #
 # registerNameServer    REQUIRED
 #
 # Specifies if AIA will controlled by a NameServer or will be
 # directly connected to an AppServer client.
 #
 # Default: 1
 #
 # Host                  OPTIONAL
 #
 # Required if AIA will be directly connected to an AppServer client,
 # i.e. registerNameServer=0, to specify the host location
 # of the AppServer client. If AIA is controlled by a
 # NameServer, i.e. registerNameServer=1, this property is ignored
 #
 # Default: localhost
 #
 # Port                  OPTIONAL
 #
 # Required if AIA will be directly connected to an AppServer Client,
 # i.e. registerNameServer=0, to specify the port of the AppServer
 # client. If AIA is controlled by a NameServer, i.e.
 # registerNameServer=1, this property is ignored
 #
 # Default: 3090
 #
 #################
 # [WSA]  This section provides information that applies to the Web Services
 # Adapter or WSA.  Subsequent instances for managing WSAs inherit the 
 # definitions you provide here.
 #
 # logFile                   REQUIRED
 #
 # Specifies the name of the log file that the AppServer internet adapter uses.
 #
 # Used by:                 WSA
 #
 # Default: [work-dir]/wsa.log
 #
 # location                  REQUIRED
 # 
 # Specifies whether the WSA adapter instance is local to the system where the
 # AdminServer is running or remote on a different system.
 #
 # Possible values:     local - located on the same system
 #                      remote - located on a different system
 #
 # Used by:                 AdminServer
 #
 # Default: local
 #
 #
 # loggingLevel               REQUIRED
 #
 # Specifies the amount of information to be written to the broker log.
 # Possible values: 1-4
 #                  1 - Error only
 #                  2 - Terse 
 #                  3 - Verbose 
 #                  4 - Diagnostic
 # 
 # Used by:                 WSA
 #
 # Default:  2
 #
 #  
 # logAppend          REQUIRED
 #
 # Specifies when a broker is started if a new broker log file should be 
 # created even if the file specified by brokerLogFile exists, or if the log
 # entries should be appended to the log file.  
 # Possible values: 0 - create new broker log file
 #                  1 - append to the existing log file
 # 
 # Used by:                 WSA
 #
 # Default: 1
 #
 # 
 # logEntries            REQUIRED
 #
 # Specifies the number of WSA subsystems that perform diagnostic logging.  
 # This property should be set to 4294967295 unless directed by PSC technical 
 # support.
 #
 # Used by:                 WSA
 #
 # Default: 4294967295
 #
 #
 # logThreshold          REQUIRED
 #
 # The logThreshold property is used to automatically save the existing WSA
 # log file and start a new zero length log file in its place.  When the WSA
 # starts, it will test to see if the size of the existing log file is greater
 # than the size of the logThreshold entry and the logThreshold entry is greater
 # than zero.  If both of these conditions are met, the current log file is 
 # renamed with a -save appended to its file name and a new zero length file
 # created.
 #
 # Possible values: 0 - Do not check for log file size
 #                  n - The maximum size the log file can grow to before it is
 #                      saved and a new file started
 #
 # Used by:                 WSA
 #
 # Default: 0
 #
 # wsaURL                    REQUIRED
 # 
 # The wsaURL property serves a dual purpose.  First it supplies the AdminServer
 # with the URL of the WSA so that it may access its built-in administration 
 # Web service application.  Second, it supplies the WSA with the URL of the 
 # WSA, which it will place in the WSDL documents it generates and distributes.
 #
 # Used by:                 WSA,AdminServer
 #
 # Possible values:    Any valid http or https URL 
 #
 # Default: none
 #
 #
 # proxyHost                 OPTIONAL
 # 
 # The proxyHost property is used by the AdminServer when it send administrative
 # messages to the WSA and a proxy Web Server is in the network path.  This 
 # property is paired with proxyPort and must be set as a pair.  When blank, the
 # AdminServer does not expect to work with a proxy server.
 #
 # Possible values:     any valid dot-format IP address or DNS host name
 #
 # Used by:                 AdminServer
 #
 # Default: none
 #
 #
 # proxyPort                 OPTIONAL
 # 
 # The proxyPort property is used by the AdminServer when it send administrative
 # messages to the WSA and a proxy Web Server is in the network path.  This 
 # property is paired with proxyHost and must be set as a pair.  The value is
 # required if the proxyHost property is set and ignored if the proxyHost 
 # property is blank.
 # 
 # Used by:                 AdminServer
 #
 # Possible values:     any valid TCP/IP port number
 #
 # Default: 0
 #
 #
 # proxyUsername             OPTIONAL
 # 
 # The proxyUsername property is used by the AdminServer when it send 
 # administrative messages to the WSA and a proxy Web Server is in the network 
 # path and the server requires user authentication.  This property is paired 
 # with proxyPassword and must be set as a pair.  The value is ignored if the
 # proxyHost property is blank.
 #
 # Possible values:     any valid HTTP Basic-authentication username
 #
 # Used by:                 AdminServer
 #
 # Default: none
 #
 #
 # proxyPassword             OPTIONAL
 # 
 # The proxyPassword property is used by the AdminServer when it send 
 # administrative messages to the WSA and a proxy Web Server is in the network 
 # path and the server requires user authentication.  This property is paired 
 # with proxyUsername and must be set as a pair.  The value is ignored if the
 # proxyHost and proxyUsername properties are blank.
 #
 # Possible values:     any valid HTTP Basic-authentication password
 #
 # Used by:                 AdminServer
 #
 # Default: none
 #
 #
 # webServerAuth             REQUIRED
 # 
 # The webServerAuth property indicates whether the AdminServer must supply a
 # username and password to the WSA whenever it sends an administrative 
 # command.  
 #
 # Possible values:     0 - No username and password required 
 #                      1 - Use the username and password supplied when accessing
 #                          the AdminServer
 #                      2 - Always prompt the user for a username and password
 #
 # Used by:                 AdminServer
 #
 # Default: 0
 #
 #
 # adminSoapAction           OPTIONAL
 # 
 # When the AdminServer sends administrative messages to a WSA, it must traverse
 # a Web Server and possibly a proxy Web server or firewall.  In doing so, the
 # SOAPAction HTTP header may be tested to see if the message will be allowed.  
 # To accommodate these security checks, the SOAP Action HTTP header value may 
 # be set here to the required value.
 #
 # Possible values:     any valid HTTP header character string
 #
 # Used by:                 AdminServer
 #
 # Default: urn:services-progress-com:wsa-admin:01
 #
 #
 # httpErrorPage            OPTIONAL
 #
 # The httpErrorPage points to a HTML page that may be customized to the 
 # customers needs when the WSA must return a HTTP related error to its client.
 #
 # Possible values:     any valid file path to a HTML page
 #
 # Used by:                 WSA
 #
 # Default: httperror.html
 #
 #
 # enableWsdl               OPTIONAL
 #
 # The enableWsdl property controls the WSA's ability to respond to inquiries 
 # for WSDL documents for any of the Web service applications it hosts.
 #
 # Possible values:     0 - Reject WSDL document requests
 #                      1 - Allow WSDL document requests
 #
 # Used by:                 WSA
 #
 # Default: 1
 #
 #
 # enableWsdlListings       OPTIONAL
 #
 # The enableWsdlListings property controls the WSA's ability to respond to a
 # request for a list of WSDL documents it has available.  The response list is
 # in the form of a HTML page.
 #
 # Possible values:     0 - Respond with an HTTP error response
 #                      1 - Return a HTML page with the list of WSDL documents
 #
 # Used by:                 WSA
 #
 # Default: 1
 #
 #
 # wsdlListingPage          OPTIONAL
 #
 # The wsdlListingPage property indicates to the WSA where the location of the
 # HTML page that will be used to return the list of available WSDL documents.
 #
 # Possible values:     any valid disk file path to a HTML page.  If blank a
 #                      built-in default will be used
 #
 # Used by:                 WSA
 #
 # Default: WSDLListing.html
 #
 #
 # noWsdlPage               OPTIONAL
 #
 # The noWsdlPage is a file path to the HTML page that will be returned when
 # a request for a specific WSDL document cannot be met.  It allows the customer
 # to customize the page to their own requirements.
 #
 # Possible values:     any valid disk file path pointing to an HTML page. If
 #                      blank a built-in default will be used
 #
 # Used by:                 WSA
 #
 # Default: none
 #
 #
 # adminAuth                OPTIONAL
 #
 # The adminAuth property is used by the WSA to control its requirement that the
 # JSE provide it with a username that the JSE has authenticated and authorized
 # to have access to the WSA's administration URL.
 #
 # Possible values:     0 - The JSE does not have to supply an authenticated and
 #                          authorized username
 #                      1 - The JSE does have to supply an authenticated and
 #                          authorized username
 #
 # Used by:                 WSA
 #
 # Default: 1
 #
 #
 # wsdlAuth                OPTIONAL
 #
 # The wsdlAuth property is used by the WSA to control its requirement that the
 # JSE provide it with a username that the JSE has authenticated and authorized
 # to have access to the WSA's WSDL document URL.
 #
 # Possible values:     0 - The JSE does not have to supply an authenticated and
 #                          authorized username
 #                      1 - The JSE does have to supply an authenticated and
 #                          authorized username
 #
 # Used by:                 WSA
 #
 # Default: 0
 #
 #
 # appAuth                OPTIONAL
 #
 # The appAuth property is used by the WSA to control its requirement that the
 # JSE provide it with a username that the JSE has authenticated and authorized
 # to have access to the WSA's Web service application URL.
 #
 # Possible values:     0 - The JSE does not have to supply an authenticated and
 #                          authorized username
 #                      1 - The JSE does have to supply an authenticated and
 #                          authorized username
 #
 # Used by:                 WSA
 #
 # Default: 0
 #
 # adminRoles               OPTIONAL
 #
 # The WSA can perform additional user authorization to individual administration
 # operations.  The adminRoles property is a comma separated list of administration
 # roles (no embedded spaces) it recognizes.  Any role name listed here must
 # have a specific AdminRole.role-name definition in the ubroker.properties file.  
 # Any JSE authenticated administrator who is not in one of these roles, gets
 # the privileges of the default administrator role that is defined in the
 # AdminRole group.
 #
 # Possible values:     blank indicates that every JSE authenticated administrator
 #                      has full administrative privileges.
 #
 #                      A comma separated list of role names that have 
 #                      corresponding AdminRole.role-name definitions.
 #
 # Used by:                 WSA
 #
 # Default: PSCAdmin,PSCOper
 #
 #
 # webAppEnabled            REQUIRED
 #
 # The webAppEnabled property controls the WSA's ability to accept and process
 # SOAP requests to any of its hosted Web service applications.
 #
 # Possible values:     0 - do not accept or process any SOAP request to 
 #                          hosted Web services
 #                      1 - accept and process SOAP requests for any hosted
 #                          Web service
 #
 # Used by:                 WSA
 #
 # Default: 0
 #
 #
 # adminEnabled            REQUIRED
 #
 # The adminEnabled property controls the WSA's ability to accept and process
 # WSA administration SOAP requests.
 #
 # Possible values:     0 - do not accept or process any administration SOAP 
 #                          requests
 #                      1 - accept and process administration SOAP requests
 #
 # Used by:                 WSA
 #
 # Default: 1
 #
 #
 # appProtocol             OPTIONAL
 #
 # The appProtocol property controls the protocol (HTTP or HTTPS) of the URL 
 # that the WSA places in the WSDL documents it generates for deployed Web 
 # Service applications.  This URL will be derived from the property wsaURL, 
 # which describes the WSA's administration URL.  When the http/https protocol 
 # differs between the administration URL and the URL used to execute Web 
 # Service applications, this property can be used to control the difference 
 # in protocol.  
 #
 # Possible values:     0 - the Web service URL uses the same protocol as the 
 #                          administration URL in wsaURL
 #                      1 - the Web service URL will always use http
 #                      2 - the Web service URL will always use https
 #
 # Used by:                 WSA
 #
 # Default: 0
 #
 #
 # debugClients            OPTIONAL
 #
 # The debugClients property controls the WSA's ability to dump http and SOAP
 # protocol message information to the WSA log file.  When this property is 
 # non-blank and the loggingLevel property is set to 4 (Diagnostic), http
 # mesage information received by the WSA servlet and the exact contents of the
 # incomming and outgoing SOAP messages are dumped to the log.  This property
 # is a comma separated list of dot-formatted IP addresses. 
 #
 # Possible values:     blank - do not dump http and SOAP messages for any client
 #                      * -     dump http and SOAP messages for all WSA clients
 #                      x.x.x.x - dump http and SOAP messages for this client
 #                              IP address
 #
 # Used by:                 WSA
 #
 # Default: none
 #
 #
 # logMsgThreshold         OPTIONAL 
 #
 # The logMsgThreshold property controls the amount of SOAP message information
 # that can be written to the WSA log file.  When using the debugClients 
 # property, very large SOAP messages may cause a problem in writing to the
 # WSA's log file.  You may use this property to set a maximum limit on the
 # number of characters written for each SOAP message.  When the threshold is
 # reached, the remainder of the message is truncated.
 #
 # Possible values:     -1 - do not limit the amount of SOAP message data that
 #                           gets written to the WSA log file
 #                      n -  write up to this number of charaters from each SOAP
 #                           message to the log file
 #
 # Used by:                 WSA
 #
 # Default: -1
 #
 #
 #################
 # [AdminRole]  This section provides information that applies to the 
 # administrator role definitions for the Web Services Adapter or WSA.  
 # Subsequent instances for managing WSAs inherit the definitions you provide 
 # here.
 #
 #
 # servlet_services         REQUIRED
 #
 # The servlet_services property governs which operations the administrator
 # role may perform on the registry of deployed Web service applications.  The
 # operations performed is a comma separated list (no embedded spaces) of 
 # the possible values.
 #
 # Possible values:     <blank> no operations are permitted
 #                      read - may list, query and export Web service applications
 #                      write - may deploy or import Web service applications
 #                      delete - may undeploy Web service applications
 #
 # Default: read
 #
 #
 # servlet_stats            REQUIRED
 #
 # The servlet_stats property governs which operations the administator
 # role may perform on the WSA's statistical counters.  The operations performed 
 # is a comma separated list (no embedded spaces) of the possible values.
 #
 # Possible values:     <blank> no operations are permitted
 #                      read - may list statistical counters
 #                      write - may reset statistical counters to zero
 #
 # Default: none
 #
 #
 # servlet_props            REQUIRED
 #
 # The servlet_props property governs which operations the administrator
 # role may perform on the WSA's run-time changeable properties.  The operations 
 # performed is a comma separated list (no embedded spaces) of the possible 
 # values.
 #
 # Possible values:     <blank> no operations are permitted
 #                      read - may list run-time changeable properties 
 #                      write - may change run-time changeable properties
 #
 # Default: none
 #
 #
 # apps_enable              REQUIRED
 #
 # The apps_enable property governs which operations the administrator
 # role may perform on the enable state of Web service applications.  The 
 # operations performed is a comma separated list (no embedded spaces) of the 
 # possible values.
 #
 # Possible values:     <blank> no operations are permitted
 #                      read - may obtain the enable state of Web services
 #                      write - may enable and disable Web services
 #
 # Default: none
 #
 #
 # apps_stats              REQUIRED
 #
 # The apps_stats property governs which operations the administrator
 # role may perform on a Web service's statistical counters.  The operations 
 # performed is a comma separated list (no embedded spaces) of the possible 
 # values.
 #
 # Possible values:     <blank> no operations are permitted
 #                      read - may list statistical counters
 #                      write - may reset statistical counters to zero
 #
 # Default: none
 #
 #
 # apps_props               REQUIRED
 #
 # The apps_props property governs which operations the administrator
 # role may perform on a Web service's properties.  The operations # performed 
 # is a comma separated list (no embedded spaces) of the possible values.
 #
 # Possible values:     <blank> no operations are permitted
 #                      read - may list Web service properties 
 #                      write - may change Web service properties
 #
 # Default: none
 #
 #
 # apps_defaults            REQUIRED
 #
 # The apps_defaults property governs which operations the administrator
 # role may perform on the default Web service properties that are used to
 # initialize a newly deployed Web service.  The operations # performed 
 # is a comma separated list (no embedded spaces) of the possible values.
 #
 # Possible values:     <blank> no operations are permitted
 #                      read - may list default Web service properties 
 #                      write - may change default Web service properties
 #
 # Default: none
 #
 #
 #
 ################################
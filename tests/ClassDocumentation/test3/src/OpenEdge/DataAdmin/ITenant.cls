/*************************************************************/
/* Copyright (c) 2011 by progress Software Corporation       */
/*                                                           */
/* all rights reserved.  no part of this program or document */
/* may be  reproduced in  any form  or by  any means without */
/* permission in writing from progress Software Corporation. */
/*************************************************************/
/*------------------------------------------------------------------------
    Purpose     : interface for tenant (data source _tenant)
    Syntax      : 
    Description : 
    Author(s)   : hdaniels
    Created     : Thu Jun 10 00:01:21 EDT 2010
    Notes       : 
  ----------------------------------------------------------------------*/
 
using OpenEdge.DataAdmin.IDataAdminElement from propath.
 
using OpenEdge.DataAdmin.IArea from propath.
using OpenEdge.DataAdmin.ISequenceValueMap from propath.
using OpenEdge.DataAdmin.IPartitionMap from propath.
using OpenEdge.DataAdmin.ITenantGroupMemberSet from propath.
using OpenEdge.DataAdmin.ITenantGroupSet from propath.
using OpenEdge.DataAdmin.IDomainSet from propath.
using OpenEdge.DataAdmin.IUserSet from propath.

 
interface OpenEdge.DataAdmin.ITenant inherits IDataAdminElement :  
      
    /** Id internal unique integer identifier - read-only - generated by database 
        (internal - dump and load will generate a new id) */    
    define public property Id as int no-undo                   get.
    
    /** Name character unique identifier - max length 32 */    
    define public property Name as char no-undo                get. set.
    
    /** Type tenant type is a character property with 
         valid values Regular,Super or Default  */    
    define public property Type as character no-undo           get. set.
    
    /** ExternalId an external character Id populated by owner 
        - no enforcement of unique  */    
    define public property ExternalID as char no-undo          get. set.
    
    /** Description   */    
    define public property Description as char no-undo         get. set.
    
    /** IsDataEnabled 
          default true gives access to tenant data 
          set to false to prevent access to tenant data 
          (only shared data accessible)  */    
    define public property IsDataEnabled as logical no-undo         get. set. 
    
    /** IsAllocated 
          <b>true</b> if all partitions have a state of Allocated or None
          false if any partition have a state of Delayed 
          Use Allocate() to allocate delayed partitions   */    
    define public property IsAllocated as logical no-undo      get.
    
    /** DefaultDataArea 
          The name of the default data area for new partitions */    
    define public property DefaultDataArea   as IArea no-undo   get. set.
    
    /** DefaultIndexArea 
          The name of the default index area for new partitions */    
    define public property DefaultIndexArea  as IArea no-undo   get. set.
    
    /** DefaultLobArea 
          The name of the default lob area for new partitions */    
    define public property DefaultLobArea    as IArea no-undo   get. set.
    
    /** A preference setting that decides whether to allocate partitions when the tenant 
        is created, when tables are multi-tenant enabled or new multi-tenant tables, 
        indexes or lob fields are created. The preference can have the following values:
        -   Immediate – allocate immediately using default areas. 
            Allocates all partitions according to the defaults when the tenant is created.  
        -   Delayed – Delay the physical allocation of the partitions. S
                      Sets the partitions AllocateState to "Delayed" and allowing them 
                      to be allocated when the ITenant:Allocate() operation is executed.   
        -   None – No automatic allocation. 
                   Sets the partitions AllocateState to "None", which means that the 
                   allocation only can be done directly on the actual Partition. 
                  (Some owning classes may allow Allocate("All") ) */    
    define public property DefaultAllocation as char no-undo    get. set.
    
    /** SequenceValues ISequenceValueMap collection of the multi-tenant sequence 
        values ISequenceValue elements for the tenant mapped by ISequence       */                    
    define public property SequenceValues  as ISequenceValueMap no-undo      get.
    
    /** Partitions IPartitionMap property with all partitions of the tenant
        mapped by ISchemaElement (ITable,IIndex,IField)     */                    
    define public property Partitions      as IPartitionMap no-undo get.
    
    /** TenantGroups ITenantGroupSet with all partition groups (ITenantGroup) of the tenant
        belongs to */                    
    define public property TenantGroups as ITenantGroupSet no-undo get.
    
    /** TenantGroupMembers ITenantGroupMemberSet property with all partition group details
        (ITenantGroupMember) of the tenant. The ITenantGroupMember element on this currently only has the ITenant 
        and ITenantGroup keys and does thus not provide any information that you 
        cannot get using the TenantGroups property */                    
    define public property TenantGroupMembers as ITenantGroupMemberSet no-undo get.
    
    /** Domains IDomainSet of the domains (IDomain) of the tenant - read-only  */                    
    define public property Domains as IDomainSet no-undo get.  
    
    /** Users IUserSet of the users (IUser) of the tenant  - read-only
        Note: the users can also be accessed through the IDomain elements returned 
        by the Domains property. */                    
    define public property Users as IUserSet no-undo get.          
  
    /** Allocates the tenant's partitions   - read-only (the Tenant must be passed to a service
    update or create method to commit the changes)  */                    
    method public logical Allocate().
   
end interface.